// ==================== –ù–û–í–û–ï: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ –∏ –ø–∞–º—è—Ç–∏ ====================
require('dotenv').config();

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã Node.js –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
const os = require('os');
const THREAD_POOL_SIZE = process.env.UV_THREADPOOL_SIZE || 128;
process.env.UV_THREADPOOL_SIZE = THREAD_POOL_SIZE;

console.log(`üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞:`);
console.log(`   CPU cores: ${os.cpus().length}`);
console.log(`   Thread pool: ${THREAD_POOL_SIZE}`);
console.log(`   Memory: ${Math.round(os.totalmem() / 1024 / 1024 / 1024)}GB`);

// ==================== –ù–û–í–û–ï: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ====================
const https = require('https');
const http = require('http');

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∫–µ—Ç–æ–≤
https.globalAgent.maxSockets = Infinity;
http.globalAgent.maxSockets = Infinity;
https.globalAgent.maxFreeSockets = 256;
http.globalAgent.maxFreeSockets = 256;

process.on('uncaughtException', (error) => {
  console.error('üî• –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üî• –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô –ü–†–û–ú–ò–°:', reason);
});

// ==================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ‚Ññ1: –£–õ–£–ß–®–ï–ù–ù–´–ô LRU –ö–≠–® ====================
class OptimizedLRUCache {
  constructor(maxSize = 2000, maxMemoryMB = 800) {
    this.maxSize = maxSize;
    this.maxMemoryBytes = maxMemoryMB * 1024 * 1024;
    this.cache = new Map();
    this.stats = {
      hits: 0,
      misses: 0,
      evictions: 0
    };
    this.cleanupInterval = setInterval(() => this.cleanup(), 60000);
  }

  get(key) {
    if (!this.cache.has(key)) {
      this.stats.misses++;
      return null;
    }

    const value = this.cache.get(key);
    this.cache.delete(key);
    this.cache.set(key, value);
    this.stats.hits++;

    return value.data;
  }

  set(key, value, ttl = 300000) {
    const item = {
      data: value,
      timestamp: Date.now(),
      ttl: ttl
    };

    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.cache.size >= this.maxSize) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
      this.stats.evictions++;
    }

    this.cache.set(key, item);

    if (this.cache.size % 5 === 0) {
      this.cleanup();
    }
  }

  cleanup() {
    const now = Date.now();
    let cleaned = 0;

    for (let [key, value] of this.cache.entries()) {
      if (now - value.timestamp > value.ttl) {
        this.cache.delete(key);
        cleaned++;
      }
    }

    if (cleaned > 0) {
      console.log(`üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
    }
  }

  getStats() {
    const total = this.stats.hits + this.stats.misses;
    return {
      size: this.cache.size,
      hits: this.stats.hits,
      misses: this.stats.misses,
      evictions: this.stats.evictions,
      hitRate: total > 0 ? ((this.stats.hits / total) * 100).toFixed(2) + '%' : '0%',
      memoryUsage: this.getMemoryUsage() + 'MB'
    };
  }

  getMemoryUsage() {
    let size = 0;
    for (let [key, value] of this.cache.entries()) {
      size += key.length;
      try {
        size += JSON.stringify(value).length;
      } catch (e) {
        size += 100;
      }
    }
    return Math.round(size / 1024 / 1024);
  }

  emergencyCleanup() {
    const currentSize = this.cache.size;
    const targetSize = Math.floor(this.maxSize * 0.3);

    if (currentSize <= targetSize) return 0;

    let deleted = 0;
    const keysToDelete = [];

    for (let [key] of this.cache.entries()) {
      if (deleted >= currentSize - targetSize) break;
      keysToDelete.push(key);
      deleted++;
    }

    keysToDelete.forEach(key => this.cache.delete(key));
    return deleted;
  }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ö–≠–®–ê ====================
const quickCache = new OptimizedLRUCache(2000, 800);

// ==================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ‚Ññ2: –£–í–ï–õ–ò–ß–ï–ù–ù–´–ï –¢–ê–ô–ú–ê–£–¢–´ –ò RETRY –õ–û–ì–ò–ö–ê ====================
const FIREBASE_TIMEOUT = 20000;
const S3_TIMEOUT = 45000;
const RETRY_ATTEMPTS = 3;
const RETRY_BASE_DELAY = 1000;

const withRetry = async (operation, operationName = 'Operation', timeoutMs = FIREBASE_TIMEOUT, maxRetries = RETRY_ATTEMPTS) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const result = await Promise.race([
        operation(),
        new Promise((_, reject) =>
          setTimeout(() => {
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationName} –ø–æ—Å–ª–µ ${timeoutMs}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`));
          }, timeoutMs)
        )
      ]);
      return result;
    } catch (error) {
      if (attempt === maxRetries) throw error;

      const delay = RETRY_BASE_DELAY * Math.pow(2, attempt - 1);
      console.warn(`üîÑ –ü–æ–≤—Ç–æ—Ä ${attempt}/${maxRetries} –¥–ª—è ${operationName} —á–µ—Ä–µ–∑ ${delay}–º—Å:`, error.message);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};

const withStrictTimeout = (promise, timeoutMs, operationName = 'Operation') => {
  return withRetry(() => promise, operationName, timeoutMs, 1);
};

// ==================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ‚Ññ3: –£–í–ï–õ–ò–ß–ï–ù–ù–´–ï –õ–ò–ú–ò–¢–´ –ü–ê–ú–Ø–¢–ò ====================
const MEMORY_LIMIT = 800 * 1024 * 1024;
let emergencyMode = false;

setInterval(() => {
  const memory = process.memoryUsage();
  const heapUsedMB = Math.round(memory.heapUsed / 1024 / 1024);
  const memoryLimitMB = MEMORY_LIMIT / 1024 / 1024;

  if (heapUsedMB > memoryLimitMB * 0.8) {
    console.warn('üö® –í–´–°–û–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–ê–ú–Ø–¢–ò:', {
      –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: heapUsedMB + 'MB',
      –≤—Å–µ–≥–æ: Math.round(memory.heapTotal / 1024 / 1024) + 'MB',
      –ª–∏–º–∏—Ç: memoryLimitMB + 'MB'
    });

    const now = Date.now();
    let cleanedCount = 0;

    for (let [key, value] of quickCache.cache.entries()) {
      if (now - value.timestamp > 30000) {
        quickCache.cache.delete(key);
        cleanedCount++;
      }
    }

    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞`);

    if (global.gc) {
      global.gc();
      console.log('üîÑ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    }
  }

  if (process.env.NODE_ENV === 'development' && Date.now() % 300000 < 1000) {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:', quickCache.getStats());
  }
}, 15000);

const express = require('express');
const cors = require("cors");
const admin = require('firebase-admin');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const { S3Client, PutObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } = require("@aws-sdk/client-s3");
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

const app = express();

// ==================== –ù–û–í–û–ï: –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ ====================
const rateLimit = require('express-rate-limit');

const heavyLimiter = rateLimit({
  windowMs: 1 * 60 * 1000,
  max: 100,
  message: {
    error: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
    retryAfter: 60
  },
  standardHeaders: true,
  legacyHeaders: false
});

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 1000,
  standardHeaders: true,
  legacyHeaders: false
});

app.use(cors());
app.use(express.json());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç–µ—Ä—ã
app.use("/send-event-notification", heavyLimiter);
app.use("/generate-upload-url", heavyLimiter);
app.use("/news", apiLimiter);
app.use("/send-message", apiLimiter);

const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024,
    files: 5
  }
});

const mimeTypeMapping = {
  'image/jpeg': '.jpg',
  'image/png': '.png',
  'image/gif': '.gif',
  'image/webp': '.webp',
  'application/pdf': '.pdf',
  'video/mp4': '.mp4',
  'video/quicktime': '.mov',
  'video/x-msvideo': '.avi',
  'video/x-matroska': '.mkv',
  'application/msword': '.doc',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
  'application/vnd.ms-excel': '.xls',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
  'application/vnd.ms-powerpoint': '.ppt',
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
  'application/zip': '.zip',
  'application/x-rar-compressed': '.rar',
  'text/plain': '.txt',
  'audio/mpeg': '.mp3',
  'audio/wav': '.wav'
};

const getFileExtension = (mimeType) => {
  return mimeTypeMapping[mimeType] || '.bin';
};

// === Firebase Admin SDK ===
try {
  const base64 = process.env.FIREBASE_CONFIG;
  if (!base64) throw new Error("FIREBASE_CONFIG –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env");
  const serviceAccount = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));

  const firebaseConfig = {
    credential: admin.credential.cert(serviceAccount),
    databaseURL: process.env.FIREBASE_DB_URL,
    httpAgent: new https.Agent({
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 20,
      timeout: 30000,
      freeSocketTimeout: 30000
    })
  };

  admin.initializeApp(firebaseConfig);
  console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
} catch (err) {
  console.error("üî• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", err);
}

const db = admin.database();
const auth = admin.auth();

// ==================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø AWS SDK ====================
const s3 = new S3Client({
  region: process.env.YC_S3_REGION || "ru-central1",
  endpoint: process.env.YC_S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY,
    secretAccessKey: process.env.YC_SECRET_KEY,
  }
});

const BUCKET_NAME = process.env.YC_S3_BUCKET;

// === Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase-—Ç–æ–∫–µ–Ω–∞ ===
async function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization || "";
  const token = authHeader.startsWith("Bearer ") ? authHeader.split("Bearer ")[1] : null;

  if (!token) {
    console.warn("üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
    return res.status(401).send("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞");
  }

  try {
    const decoded = await withRetry(
      () => admin.auth().verifyIdToken(token),
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Firebase',
      FIREBASE_TIMEOUT
    );
    req.user = decoded;
    if (process.env.NODE_ENV === 'development') {
      console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, uid:", decoded.uid);
    }
    next();
  } catch (err) {
    console.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫", err);
    res.status(403).send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
  }
}

// === –£—Ç–∏–ª–∏—Ç—ã S3-–∑–∞–≥—Ä—É–∑–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è ===
async function uploadToS3(buffer, fileName, contentType) {
  await s3.send(new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: fileName,
    Body: buffer,
    ContentType: contentType,
    ACL: 'public-read'
  }));
  return `https://${BUCKET_NAME}.storage.yandexcloud.net/${fileName}`;
}

async function uploadToS3WithRetry(buffer, fileName, contentType, retries = RETRY_ATTEMPTS) {
  return withRetry(
    () => uploadToS3(buffer, fileName, contentType),
    '–ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3',
    S3_TIMEOUT,
    retries
  );
}

async function deleteFromS3(urls) {
  const keys = urls.map(url => {
    const parts = url.split(`${BUCKET_NAME}/`);
    return parts[1] ? { Key: parts[1] } : null;
  }).filter(Boolean);

  if (keys.length === 0) return;

  await withRetry(
    () => s3.send(new DeleteObjectsCommand({
      Bucket: BUCKET_NAME,
      Delete: { Objects: keys }
    })),
    '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ S3',
    S3_TIMEOUT
  );
}

// ==================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ‚Ññ4: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ì–†–£–ü–ü ====================
async function getGroupWithCache(groupId) {
  const cacheKey = `group_${groupId}`;
  const cached = quickCache.get(cacheKey);

  if (cached) {
    return cached;
  }

  try {
    const groupSnap = await withRetry(
      () => db.ref(`groups/${groupId}`).once('value'),
      `–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ${groupId} –∏–∑ Firebase`,
      10000
    );
    const groupData = groupSnap.val();

    if (groupData) {
      quickCache.set(cacheKey, groupData, 600000);
    }

    return groupData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã ${groupId}:`, error.message);
    return null;
  }
}

// üî• –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceMetrics = {
  requests: 0,
  errors: 0,
  slowRequests: 0,
  cacheHits: 0,
  cacheMisses: 0,
  startTime: Date.now()
};

// üî• Middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  if (req.url === '/health' || req.url === '/ping' || req.url === '/metrics' ||
      req.url === '/light-ping' || req.url === '/load-metrics') {
    return next();
  }

  performanceMetrics.requests++;
  const start = Date.now();
  const requestId = Math.random().toString(36).substring(7);

  if (process.env.NODE_ENV === 'development') {
    console.log(`üì® [${requestId}] ${req.method} ${req.url} - –ù–∞—á–∞–ª–æ`);
  }

  res.on('finish', () => {
    const duration = Date.now() - start;
    const isSlow = duration > 3000;

    if (isSlow) {
      performanceMetrics.slowRequests++;
      console.warn(`üêå [${requestId}] –ú–ï–î–õ–ï–ù–ù–û: ${req.method} ${req.url} - ${duration}–º—Å`);
    }

    if (process.env.NODE_ENV === 'development' || duration > 1000) {
      console.log(`‚úÖ [${requestId}] ${req.method} ${req.url} - ${duration}–º—Å`);
    }
  });

  next();
});

// ==================== –£–ü–†–û–©–ï–ù–ù–´–ï HEALTH CHECKS ====================

app.get("/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: Date.now(),
    uptime: Math.round(process.uptime())
  });
});

app.get("/light-ping", (req, res) => {
  res.json({
    pong: Date.now(),
    status: "alive",
    version: "2.0.0-optimized"
  });
});

app.get("/load-metrics", (req, res) => {
  const load = os.loadavg();
  const memory = process.memoryUsage();
  const uptime = Date.now() - performanceMetrics.startTime;
  const requestsPerMinute = (performanceMetrics.requests / (uptime / 60000)).toFixed(2);

  res.json({
    loadAverage: load,
    memory: {
      used: Math.round(memory.heapUsed / 1024 / 1024) + 'MB',
      total: Math.round(memory.heapTotal / 1024 / 1024) + 'MB',
      rss: Math.round(memory.rss / 1024 / 1024) + 'MB'
    },
    performance: {
      activeRequests: performanceMetrics.requests,
      requestsPerMinute: requestsPerMinute,
      errorRate: ((performanceMetrics.errors / Math.max(performanceMetrics.requests, 1)) * 100).toFixed(2) + '%',
      slowRequests: performanceMetrics.slowRequests
    },
    cache: quickCache.getStats(),
    system: {
      cpuCores: os.cpus().length,
      threadPool: THREAD_POOL_SIZE,
      uptime: Math.round(process.uptime()) + 's'
    }
  });
});

app.get("/", (req, res) => {
  res.json({
    message: "Firebase Admin Server —Ä–∞–±–æ—Ç–∞–µ—Ç (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 2.0)",
    timestamp: Date.now(),
    endpoints: [
      "/light-ping - –ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
      "/load-metrics - –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏",
      "/health - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
    ]
  });
});

const PORT = process.env.PORT || 3000;

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 2.0)`);
  console.log(`‚úÖ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: ${MEMORY_LIMIT / 1024 / 1024}MB`);
  console.log(`‚úÖ –õ–∏–º–∏—Ç –∫—ç—à–∞: ${quickCache.maxSize} –∑–∞–ø–∏—Å–µ–π`);
  console.log(`‚úÖ –¢–∞–π–º–∞—É—Ç Firebase: ${FIREBASE_TIMEOUT}–º—Å`);
  console.log(`‚úÖ –¢–∞–π–º–∞—É—Ç S3: ${S3_TIMEOUT}–º—Å`);
  console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞: ${RETRY_ATTEMPTS}`);
  console.log(`‚úÖ –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤: ${THREAD_POOL_SIZE}`);
  console.log(`‚úÖ –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤: –≤–∫–ª—é—á–µ–Ω`);
});

server.keepAliveTimeout = 60000;
server.headersTimeout = 65000;

// üîÑ –û–ë–†–ê–ë–û–¢–ö–ê SIGTERM
process.on('SIGTERM', () => {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, –ø–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
  console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:', quickCache.getStats());

  server.close(() => {
    console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });

  setTimeout(() => {
    console.log('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
    process.exit(1);
  }, 10000);
});

console.log('üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:');
console.log('   ‚Ä¢ LRU –ö—ç—à —É–ª—É—á—à–µ–Ω –∏ —É–≤–µ–ª–∏—á–µ–Ω');
console.log('   ‚Ä¢ –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 128');
console.log('   ‚Ä¢ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω');
console.log('   ‚Ä¢ –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
console.log('   ‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã —É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏');