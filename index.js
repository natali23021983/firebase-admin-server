require('dotenv').config();
const express = require('express');
const cors = require("cors");
const admin = require('firebase-admin');
const { v4: uuidv4 } = require('uuid');
const pino = require('pino');

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ì–ï–†–ê ====================
const logger = pino({
  level: process.env.LOG_LEVEL || 'info',
  transport: {
    target: 'pino-pretty',
    options: {
      colorize: true,
      translateTime: 'SYS:dd-mm-yyyy HH:MM:ss',
      ignore: 'pid,hostname'
    }
  }
});

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê ====================
const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'production';

logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render.com...');

const app = express();

// ==================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø RENDER ====================
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(cors());

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ====================
let firebaseInitialized = false;
let db = null;
let auth = null;

async function initializeFirebase() {
    try {
        logger.info('üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...');

        const base64 = process.env.FIREBASE_CONFIG;
        if (!base64) {
            throw new Error("FIREBASE_CONFIG –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        const serviceAccount = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));

        if (admin.apps.length === 0) {
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: process.env.FIREBASE_DB_URL
            });
        }

        db = admin.database();
        auth = admin.auth();
        firebaseInitialized = true;

        logger.info('‚úÖ Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: %s', error.message);
        return false;
    }
}

// ==================== MIDDLEWARE –ü–†–û–í–ï–†–ö–ò –¢–û–ö–ï–ù–ê ====================
async function verifyToken(req, res, next) {
    if (!firebaseInitialized) {
        return res.status(503).json({ error: "–°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞" });
    }

    const authHeader = req.headers.authorization || "";
    const token = authHeader.startsWith("Bearer ") ? authHeader.split("Bearer ")[1] : null;

    if (!token) {
        logger.warn('üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization');
        return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" });
    }

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        req.user = decoded;
        logger.debug('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, uid: %s', decoded.uid);
        next();
    } catch (err) {
        logger.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫: %s', err.message);
        res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    }
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞
async function removeInvalidToken(invalidToken) {
    try {
        logger.debug('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞');

        const usersSnap = await db.ref('users').once('value');
        const users = usersSnap.val() || {};

        for (const [userId, user] of Object.entries(users)) {
            if (user.fcmToken === invalidToken) {
                await db.ref(`users/${userId}`).update({ fcmToken: null });
                logger.debug('‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s', userId);
                return { success: true, userId };
            }
        }

        logger.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return { success: false, message: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" };

    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %s', err.message);
        return { success: false, error: err.message };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
async function getGroupName(groupId) {
    try {
        const groupSnap = await db.ref(`groups/${groupId}/name`).once('value');
        const groupName = groupSnap.val() || `–ì—Ä—É–ø–ø–∞ ${groupId}`;
        logger.debug('üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: %s', groupName);
        return groupName;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: %s', error.message);
        return `–ì—Ä—É–ø–ø–∞ ${groupId}`;
    }
}

// –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ ID –≥—Ä—É–ø–ø—ã
async function findParentsByGroupId(groupId) {
    try {
        logger.debug('üîç –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã: %s', groupId);

        const groupSnap = await db.ref(`groups/${groupId}/children`).once('value');
        const childrenInGroup = groupSnap.val() || {};
        const childIds = Object.keys(childrenInGroup);

        logger.debug('üë∂ –î–µ—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ: %d', childIds.length);

        if (childIds.length === 0) return [];

        const usersSnap = await db.ref('users').once('value');
        const users = usersSnap.val() || {};
        const parents = [];
        const foundParentIds = new Set();

        for (const [userId, user] of Object.entries(users)) {
            if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children) {

                const userDataSnap = await db.ref(`users/${userId}`).once('value');
                const userData = userDataSnap.val() || {};

                for (const childId of childIds) {
                    const childNameInGroup = childrenInGroup[childId];

                    for (const [parentChildId, parentChildData] of Object.entries(user.children)) {
                        if (parentChildData && parentChildData.fullName === childNameInGroup) {

                            if (!foundParentIds.has(userId)) {
                                parents.push({
                                    userId: userId,
                                    name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
                                    fcmToken: user.fcmToken || null,
                                    childId: parentChildId,
                                    childName: parentChildData.fullName,
                                    childBirthDate: parentChildData.birthDate || "",
                                    childGroup: groupId
                                });
                                foundParentIds.add(userId);
                                logger.debug('‚úÖ –†–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %s -> %s', user.name, parentChildData.fullName);
                                break;
                            }
                        }
                    }
                }
            }
        }

        logger.debug('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: %d', parents.length);
        return parents;

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: %s', error.message);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
async function sendChatNotification({
    chatId,
    senderId,
    senderName,
    message,
    messageType,
    fileUrl,
    fileName,
    isPrivate
}) {
    try {
        logger.debug('üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞: %s', chatId);

        let recipients = [];
        let chatTitle = "";

        if (isPrivate) {
            const parts = chatId.split('_');
            const otherUserId = parts.find(id => id !== senderId);

            if (otherUserId) {
                const userSnap = await db.ref(`users/${otherUserId}`).once('value');
                const user = userSnap.val();
                if (user && user.fcmToken) {
                    recipients.push({
                        userId: otherUserId,
                        name: user.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                        fcmToken: user.fcmToken
                    });
                    chatTitle = user.name || "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç";
                }
            }
        } else {
            const groupSnap = await db.ref(`groups/${chatId}`).once('value');
            const group = groupSnap.val();

            if (group) {
                chatTitle = group.name || "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç";

                if (group.teachers) {
                    for (const [teacherId, teacherName] of Object.entries(group.teachers)) {
                        if (teacherId !== senderId) {
                            const teacherSnap = await db.ref(`users/${teacherId}`).once('value');
                            const teacher = teacherSnap.val();
                            if (teacher && teacher.fcmToken) {
                                recipients.push({
                                    userId: teacherId,
                                    name: teacherName,
                                    fcmToken: teacher.fcmToken
                                });
                            }
                        }
                    }
                }

                if (group.children) {
                    const usersSnap = await db.ref('users').once('value');
                    const users = usersSnap.val() || {};

                    for (const [userId, user] of Object.entries(users)) {
                        if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children && userId !== senderId) {
                            for (const [childId, child] of Object.entries(user.children)) {
                                if (group.children[childId]) {
                                    if (user.fcmToken) {
                                        recipients.push({
                                            userId: userId,
                                            name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
                                            fcmToken: user.fcmToken
                                        });
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        logger.debug('üì® –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: %d', recipients.length);

        function getFileTypeText(messageType) {
            switch (messageType) {
                case 'image': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
                case 'video': return '–í–∏–¥–µ–æ';
                case 'audio': return '–ê—É–¥–∏–æ';
                case 'file': return '–§–∞–π–ª';
                default: return '–§–∞–π–ª';
            }
        }

        let successful = 0;
        for (const recipient of recipients) {
            try {
                const messagePayload = {
                    token: recipient.fcmToken,
                    notification: {
                        title: `üí¨ ${isPrivate ? senderName : chatTitle}`,
                        body: messageType === 'text' ? message : `üìé ${getFileTypeText(messageType)}`
                    },
                    data: {
                        type: "chat",
                        chatId: chatId,
                        senderId: senderId,
                        senderName: senderName,
                        message: message,
                        isGroup: String(!isPrivate),
                        timestamp: String(Date.now())
                    }
                };

                await admin.messaging().send(messagePayload);
                successful++;
                logger.debug('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è %s', recipient.name);
            } catch (tokenError) {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è %s: %s', recipient.name, tokenError.message);

                if (tokenError.code === "messaging/registration-token-not-registered") {
                    await removeInvalidToken(recipient.fcmToken);
                }
            }
        }

        logger.debug('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: %d/%d', successful, recipients.length);
        return { successful, total: recipients.length };

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendChatNotification: %s', error.message);
        return { successful: 0, total: 0 };
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function formatEventNotification(title, time, place, groupName) {
    let notification = `üìÖ ${title}`;

    if (time) {
        notification += ` –≤ ${time}`;
    }

    if (place) {
        notification += ` (${place})`;
    }

    if (groupName) {
        notification += ` ‚Ä¢ ${groupName}`;
    }

    return notification;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏–∏
async function sendEventNotifications({
    parents,
    groupId,
    groupName,
    eventId,
    title,
    time,
    place,
    comments,
    date,
    notificationBody
}) {
    try {
        const parentsWithTokens = parents.filter(parent => parent.fcmToken && parent.fcmToken.trim() !== "");
        logger.debug('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è %d —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏', parentsWithTokens.length);

        let successful = 0;
        let failed = 0;
        const errors = [];

        for (const parent of parentsWithTokens) {
            try {
                logger.debug('‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è %s', parent.name);

                const messagePayload = {
                    token: parent.fcmToken,
                    notification: {
                        title: "üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                        body: notificationBody
                    },
                    data: {
                        type: "new_event",
                        autoOpenFragment: "events",
                        groupId: String(groupId || ""),
                        groupName: String(groupName || ""),
                        eventId: String(eventId || ""),
                        title: String(title || ""),
                        time: String(time || ""),
                        place: String(place || ""),
                        comments: String(comments || ""),
                        date: String(date || ""),
                        timestamp: String(Date.now()),
                        childId: parent.childId || "",
                        userId: parent.userId || "",
                        childFullName: parent.childName || "",
                        childGroup: String(groupName || ""),
                        childBirthDate: parent.childBirthDate || ""
                    }
                };

                await admin.messaging().send(messagePayload);
                successful++;
                logger.debug('‚úÖ –ü—É—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è %s', parent.name);

            } catch (tokenError) {
                failed++;
                logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è %s: %s', parent.name, tokenError.message);

                errors.push({
                    parent: parent.name,
                    error: tokenError.message,
                    code: tokenError.code
                });

                if (tokenError.code === "messaging/registration-token-not-registered") {
                    const removeResult = await removeInvalidToken(parent.fcmToken);
                    logger.debug('üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %j', removeResult);
                }
            }
        }

        logger.debug('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: –£—Å–ø–µ—à–Ω–æ %d, –ù–µ—É–¥–∞—á–Ω–æ %d', successful, failed);
        return { successful, failed, totalTokens: parentsWithTokens.length, errors };

    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendEventNotifications: %s', err.message);
        return { successful: 0, failed: parents.length, errors: [err.message] };
    }
}

// ==================== HEALTH ENDPOINTS ====================
app.get('/health', (req, res) => {
    logger.debug('Health check –≤—ã–ø–æ–ª–Ω–µ–Ω');
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        firebase: firebaseInitialized,
        environment: NODE_ENV
    });
});

app.get('/ping', (req, res) => {
    res.send('pong');
});

app.get('/', (req, res) => {
    res.json({
        message: 'Firebase Admin Server —Ä–∞–±–æ—Ç–∞–µ—Ç',
        status: 'active',
        firebase: firebaseInitialized ? 'connected' : 'connecting'
    });
});

// ==================== –û–°–ù–û–í–ù–´–ï ENDPOINTS ====================

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
app.post('/deleteUserByName', async (req, res) => {
    if (!firebaseInitialized) {
        return res.status(503).json({ error: "–°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è" });
    }

    try {
        const fullName = req.body.fullName?.trim().toLowerCase();
        if (!fullName) {
            return res.status(400).json({ error: "fullName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        logger.info('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s', fullName);

        const usersSnap = await db.ref('users').once('value');
        const users = usersSnap.val() || {};
        let found = false;

        for (const [userId, user] of Object.entries(users)) {
            const name = user.name?.trim().toLowerCase();
            const role = user.role?.trim().toLowerCase();

            if (name === fullName && role === '—Ä–æ–¥–∏—Ç–µ–ª—å') {
                found = true;
                logger.info('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: %s', userId);

                if (user.children) {
                    for (const [childId, child] of Object.entries(user.children)) {
                        if (child.group) {
                            await db.ref(`groups/${child.group}/children/${childId}`).remove();
                            logger.debug('‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: %s', child.group);
                        }
                    }
                }

                await db.ref(`users/${userId}`).remove();

                try {
                    await auth.deleteUser(userId);
                    logger.info('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ Auth: %s', userId);
                } catch (authError) {
                    logger.debug('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                }

                return res.json({ success: true, message: "–†–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –¥–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã." });
            }

            if (name === fullName && role === '–ø–µ–¥–∞–≥–æ–≥') {
                found = true;
                logger.info('üë®‚Äçüè´ –ù–∞–π–¥–µ–Ω –ø–µ–¥–∞–≥–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: %s', userId);

                const groupsSnap = await db.ref('groups').once('value');
                const groups = groupsSnap.val() || {};

                for (const [groupId, group] of Object.entries(groups)) {
                    if (group.teachers?.[userId]) {
                        await db.ref(`groups/${groupId}/teachers/${userId}`).remove();
                        logger.debug('‚úÖ –ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: %s', groupId);
                    }
                }

                await db.ref(`users/${userId}`).remove();

                try {
                    await auth.deleteUser(userId);
                    logger.info('‚úÖ –ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª–µ–Ω –∏–∑ Auth: %s', userId);
                } catch (authError) {
                    logger.debug('‚ÑπÔ∏è –ü–µ–¥–∞–≥–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth');
                }

                return res.json({ success: true, message: "–ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª—ë–Ω." });
            }

            if (user.children) {
                for (const [childId, child] of Object.entries(user.children)) {
                    if (child.fullName?.trim().toLowerCase() === fullName) {
                        found = true;
                        logger.info('üë∂ –ù–∞–π–¥–µ–Ω —Ä–µ–±–µ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: %s', childId);

                        if (child.group) {
                            await db.ref(`groups/${child.group}/children/${childId}`).remove();
                            logger.debug('‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: %s', child.group);
                        }

                        await db.ref(`users/${userId}/children/${childId}`).remove();

                        return res.json({ success: true, message: "–†–µ–±—ë–Ω–æ–∫ —É–¥–∞–ª—ë–Ω." });
                    }
                }
            }
        }

        if (!found) {
            logger.warn('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %s', fullName);
            return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
        }
    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ deleteUserByName: %s', err.message);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + err.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
app.post('/deleteChild', async (req, res) => {
    try {
        const { userId, childId } = req.body;

        if (!userId || !childId) {
            return res.status(400).json({ error: "userId –∏ childId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        logger.info('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞: %s, %s', userId, childId);

        const childRef = db.ref(`users/${userId}/children/${childId}`);
        const childSnap = await childRef.once('value');

        if (!childSnap.exists()) {
            return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const child = childSnap.val();
        const groupName = child.group;
        const childName = child.fullName.trim();

        logger.info('üë∂ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞: %s, –ì—Ä—É–ø–ø–∞: %s', childName, groupName);

        let groupId = null;
        if (groupName) {
            logger.debug('üîç –ò—â–µ–º ID –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: %s', groupName);

            const groupsRef = db.ref('groups');
            const groupsSnap = await groupsRef.once('value');
            const groups = groupsSnap.val() || {};

            for (const [id, groupData] of Object.entries(groups)) {
                if (groupData.name === groupName) {
                    groupId = id;
                    logger.debug('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ ID: %s', groupId);
                    break;
                }
            }

            if (!groupId) {
                logger.warn('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: %s', groupName);
                return res.status(404).json({ error: "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
            }
        }

        if (groupId) {
            const groupChildrenRef = db.ref(`groups/${groupId}/children`);
            const groupChildrenSnap = await groupChildrenRef.once('value');
            const groupChildren = groupChildrenSnap.val() || {};

            let foundGroupChildId = null;
            for (const [groupChildId, groupChildName] of Object.entries(groupChildren)) {
                if (groupChildName.trim() === childName) {
                    foundGroupChildId = groupChildId;
                    break;
                }
            }

            if (foundGroupChildId) {
                logger.debug('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã');
                await groupChildrenRef.child(foundGroupChildId).remove();
                logger.debug('‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã');
            } else {
                logger.warn('‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ');
                return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ" });
            }
        }

        logger.debug('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        await childRef.remove();

        logger.info('‚úÖ –†–µ–±–µ–Ω–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω');

        res.json({
            success: true,
            message: `–†–µ–±–µ–Ω–æ–∫ ${childName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`
        });

    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ deleteChild: %s', err.message);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞: " + err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/update-user", async (req, res) => {
    try {
        const { fullName, newEmail } = req.body;
        if (!fullName || !newEmail) {
            return res.status(400).json({ error: "fullName –∏ newEmail –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        logger.info('‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ email: %s -> %s', fullName, newEmail);

        const snap = await db.ref("users").orderByChild("name").equalTo(fullName).once("value");
        if (!snap.exists()) {
            return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const users = snap.val();
        const keys = Object.keys(users);
        if (keys.length > 1) {
            return res.status(400).json({ error: "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º" });
        }

        const userKey = keys[0];
        const user = users[userKey];
        const userId = user.userId;

        if (!userId) {
            return res.status(400).json({ error: "userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ" });
        }

        await auth.updateUser(userId, { email: newEmail });
        await db.ref(`users/${userKey}`).update({ email: newEmail });

        logger.info('‚úÖ Email –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s', userId);

        res.json({
            success: true,
            message: "Email –æ–±–Ω–æ–≤–ª–µ–Ω",
            userId,
            updatedUser: { name: fullName, email: newEmail }
        });
    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ update-user: %s', err.message);

        if (err.code === 'auth/email-already-exists') {
            return res.status(400).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
        }

        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message });
    }
});

// –†–∞–±–æ—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
app.post("/news", verifyToken, async (req, res) => {
    try {
        const { newsId, groupId, title, description, mediaUrls = [] } = req.body;
        const authorId = req.user.uid;

        if (!groupId || !title || !description) {
            return res.status(400).json({ error: "groupId, title –∏ description –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        logger.info('üì∞ %s –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã: %s', newsId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–°–æ–∑–¥–∞–Ω–∏–µ', groupId);

        if (newsId) {
            const ref = db.ref(`news/${groupId}/${newsId}`);
            const snap = await ref.once("value");
            const oldNews = snap.val();
            if (!oldNews) {
                return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
            }

            if (oldNews.authorId !== authorId) {
                return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" });
            }

            const newData = {
                title,
                description,
                mediaUrls,
                authorId,
                timestamp: Date.now(),
            };

            await ref.update(newData);
            logger.info('‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: %s', newsId);

            return res.json({ success: true, updated: true });
        }

        const id = uuidv4();
        const ref = db.ref(`news/${groupId}/${id}`);

        const data = {
            title,
            description,
            mediaUrls,
            timestamp: Date.now(),
            authorId
        };

        await ref.set(data);
        logger.info('‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞: %s', id);

        return res.json({ success: true, id });

    } catch (err) {
        logger.error('–û—à–∏–±–∫–∞ POST /news: %s', err.message);
        res.status(500).json({ error: err.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
app.get("/news", verifyToken, async (req, res) => {
    try {
        const groupId = req.query.groupId;
        if (!groupId) {
            return res.status(400).json({ error: "groupId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        logger.debug('üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã: %s', groupId);

        const snap = await db.ref(`news/${groupId}`).once("value");
        const newsData = snap.val() || {};

        const newsList = Object.entries(newsData).map(([id, news]) => ({
            id,
            title: news.title,
            description: news.description,
            groupId: groupId,
            authorId: news.authorId,
            mediaUrls: news.mediaUrls || [],
            timestamp: news.timestamp || 0
        }));

        newsList.sort((a, b) => b.timestamp - a.timestamp);

        logger.debug('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: %d', newsList.length);

        res.json(newsList);
    } catch (err) {
        logger.error('–û—à–∏–±–∫–∞ GET /news: %s', err.message);
        res.status(500).json({ error: err.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
app.post("/deleteNews", verifyToken, async (req, res) => {
    try {
        const { groupId, newsId } = req.body;
        const authorId = req.user.uid;

        if (!groupId || !newsId) {
            return res.status(400).json({ error: "groupId –∏ newsId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        logger.info('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: %s –∏–∑ –≥—Ä—É–ø–ø—ã: %s', newsId, groupId);

        const snap = await db.ref(`news/${groupId}/${newsId}`).once('value');
        const data = snap.val();

        if (!data) {
            return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        if (data.authorId !== authorId) {
            return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });
        }

        await db.ref(`news/${groupId}/${newsId}`).remove();

        logger.info('‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞: %s', newsId);

        res.json({ success: true });
    } catch (err) {
        logger.error('–û—à–∏–±–∫–∞ deleteNews: %s', err.message);
        res.status(500).json({ error: err.message });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
app.post("/send-message", verifyToken, async (req, res) => {
    try {
        const { chatId, message, messageType = "text", fileUrl, fileName } = req.body;
        const senderId = req.user.uid;
        logger.debug('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s, %s, %s', senderId, chatId, messageType);

        if (!chatId || !message) {
            return res.status(400).json({ error: "chatId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const senderSnap = await db.ref(`users/${senderId}`).once('value');
        const sender = senderSnap.val();
        const senderName = sender?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

        const messageId = uuidv4();
        const messageData = {
            id: messageId,
            senderId,
            senderName,
            text: message,
            timestamp: Date.now(),
            fileUrl: fileUrl || null,
            fileType: messageType,
            fileName: fileName || null
        };

        const isPrivateChat = chatId.includes('_');
        let chatRef;

        if (isPrivateChat) {
            chatRef = db.ref(`chats/private/${chatId}/messages/${messageId}`);
        } else {
            chatRef = db.ref(`chats/groups/${chatId}/messages/${messageId}`);
        }

        await chatRef.set(messageData);
        logger.debug('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firebase');

        await sendChatNotification({
            chatId,
            senderId,
            senderName,
            message,
            messageType,
            fileUrl,
            fileName,
            isPrivate: isPrivateChat
        });

        logger.debug('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');

        res.json({
            success: true,
            messageId,
            timestamp: messageData.timestamp
        });

    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s', err.message);
        res.status(500).json({ error: err.message });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
app.post("/save-fcm-token", verifyToken, async (req, res) => {
    try {
        const { fcmToken } = req.body;
        const userId = req.user.uid;

        if (!fcmToken) {
            return res.status(400).json({ error: "fcmToken –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        logger.debug('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s', userId);

        await db.ref(`users/${userId}`).update({
            fcmToken,
            fcmTokenUpdated: Date.now()
        });

        logger.debug('‚úÖ FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        res.json({ success: true });

    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: %s', err.message);
        res.status(500).json({ error: err.message });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
app.post("/send-event-notification", verifyToken, async (req, res) => {
    logger.info('üü¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏');

    try {
        const {
            groupId,
            groupName,
            eventId,
            title,
            time,
            place,
            comments,
            date
        } = req.body;

        if (!groupId || !eventId || !title) {
            logger.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return res.status(400).json({
                error: "groupId, eventId, title –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }
        logger.debug('üîî –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: %j', { groupId, title, time, date });

        const actualGroupName = await getGroupName(groupId);
        logger.debug('–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: %s', actualGroupName);

        const parents = await findParentsByGroupId(groupId);

        if (parents.length === 0) {
            logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã: %s', groupId);
            return res.json({
                success: true,
                message: "–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            });
        }

        logger.debug('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏: %d', parents.length);
        parents.forEach((parent, index) => {
            logger.debug('   %d. %s (—Ä–µ–±–µ–Ω–æ–∫: %s)', index + 1, parent.name, parent.childName);
        });

        const parentsWithTokens = parents.filter(parent => parent.fcmToken && parent.fcmToken.trim() !== "");
        logger.debug('üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: %d –∏–∑ %d', parentsWithTokens.length, parents.length);

        const notificationBody = formatEventNotification(title, time, place, actualGroupName);
        logger.debug('üìù –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s', notificationBody);

        const sendResults = await sendEventNotifications({
            parents: parents,
            groupId,
            groupName: actualGroupName,
            eventId,
            title,
            time,
            place,
            comments,
            date,
            notificationBody
        });

        logger.info('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è %d —Ä–æ–¥–∏—Ç–µ–ª–µ–π', sendResults.successful);

        res.json({
            success: true,
            message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${sendResults.successful} —Ä–æ–¥–∏—Ç–µ–ª—è–º`,
            recipients: sendResults.successful,
            totalParents: parents.length,
            parentsWithTokens: sendResults.successful,
            statistics: sendResults
        });

    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏: %s', err.message);
        res.status(500).json({
            error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
        });
    }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get("/info", (req, res) => {
    logger.debug('‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ');
    res.json({
        service: "Firebase Admin Notification Server",
        version: "2.0.0",
        environment: NODE_ENV,
        firebase: firebaseInitialized ? "connected" : "disconnected",
        endpoints: [
            "POST /deleteUserByName",
            "POST /deleteChild",
            "POST /update-user",
            "POST /news",
            "GET /news",
            "POST /deleteNews",
            "POST /send-message",
            "POST /save-fcm-token",
            "POST /send-event-notification"
        ]
    });
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ====================
app.use((req, res) => {
    logger.warn('‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: %s %s', req.method, req.path);
    res.status(404).json({ error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

app.use((err, req, res, next) => {
    logger.error('üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s', err.message);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================
async function startServer() {
    await initializeFirebase();

    app.listen(PORT, () => {
        logger.info('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %d', PORT);
        logger.info('üìä –û–∫—Ä—É–∂–µ–Ω–∏–µ: %s', NODE_ENV);
        logger.info('üîß Firebase: %s', firebaseInitialized ? '‚úÖ' : '‚ùå');
        logger.info('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: %s', new Date().toISOString());
    });
}

startServer().catch(error => {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %s', error.message);
    process.exit(1);
});