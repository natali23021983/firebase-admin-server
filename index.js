require('dotenv').config();

process.on('uncaughtException', (error) => {
  console.error('üî• –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üî• –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô –ü–†–û–ú–ò–°:', reason);
});

const quickCache = new Map();

// üî• –ò–ó–ú–ï–ù–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ —Å 2 –¥–æ 4 –º–∏–Ω—É—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
setInterval(() => {
  const memory = process.memoryUsage();
  console.log('üìä Memory:',
    `RSS: ${Math.round(memory.rss / 1024 / 1024)}MB,`,
    `Heap: ${Math.round(memory.heapUsed / 1024 / 1024)}MB`
  );

  // üî• –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  if (memory.heapUsed > 500 * 1024 * 1024) { // 500MB
    console.warn('üö® –í–´–°–û–ö–û–ï –ü–û–¢–†–ï–ë–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò:', {
      heapUsed: Math.round(memory.heapUsed / 1024 / 1024) + 'MB',
      heapTotal: Math.round(memory.heapTotal / 1024 / 1024) + 'MB'
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    if (global.gc) {
      global.gc();
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
  if (quickCache.size > 100) { // üî• –ò–ó–ú–ï–ù–ï–ù–û: –±—ã–ª–æ 50, —Å—Ç–∞–ª–æ 100
    const now = Date.now();
    let deletedCount = 0;
    for (let [key, value] of quickCache.entries()) {
      if (now - value.timestamp > 300000) { // üî• –ò–ó–ú–ï–ù–ï–ù–û: 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 1
        quickCache.delete(key);
        deletedCount++;
      }
    }
    if (deletedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞`);
    }
  }
}, 240000); // üî• –ò–ó–ú–ï–ù–ï–ù–û: 4 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 2

const express = require('express');
const cors = require("cors");
const admin = require('firebase-admin');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const { S3Client, PutObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } = require("@aws-sdk/client-s3");
const bodyParser = require("body-parser");
const path = require('path');
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

const app = express();
app.use(cors());
app.use(express.json());

app.use(express.json({ limit: '5mb' }));
app.use(express.urlencoded({ extended: true, limit: '5mb' }));

const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024,
    files: 3
  }
});

// === MIME types mapping ===
const mimeTypeMapping = {
  'image/jpeg': '.jpg',
  'image/png': '.png',
  'image/gif': '.gif',
  'image/webp': '.webp',
  'application/pdf': '.pdf',
  'video/mp4': '.mp4',
  'video/quicktime': '.mov',
  'video/x-msvideo': '.avi',
  'video/x-matroska': '.mkv',
  'application/msword': '.doc',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
  'application/vnd.ms-excel': '.xls',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
  'application/vnd.ms-powerpoint': '.ppt',
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
  'application/zip': '.zip',
  'application/x-rar-compressed': '.rar',
  'text/plain': '.txt',
  'audio/mpeg': '.mp3',
  'audio/wav': '.wav'
};

const getFileExtension = (mimeType) => {
  return mimeTypeMapping[mimeType] || '.bin';
};

// === Firebase Admin SDK ===
try{
    const base64 = process.env.FIREBASE_CONFIG;
    if (!base64) throw new Error("FIREBASE_CONFIG –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env");
    const serviceAccount = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));

    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      databaseURL: process.env.FIREBASE_DB_URL
    });
    console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

} catch (err) {
  console.error("üî• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", err);
}

const db = admin.database();
const auth = admin.auth();

// === –Ø–Ω–¥–µ–∫—Å S3 ===
const s3 = new S3Client({
  region: process.env.YC_S3_REGION || "ru-central1",
  endpoint: process.env.YC_S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY,
    secretAccessKey: process.env.YC_SECRET_KEY,
  },
});
const BUCKET_NAME = process.env.YC_S3_BUCKET;
console.log("BUCKET_NAME:", process.env.YC_S3_BUCKET);

// === Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase-—Ç–æ–∫–µ–Ω–∞ ===
async function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization || "";
  const token = authHeader.startsWith("Bearer ") ? authHeader.split("Bearer ")[1] : null;

  if (!token) {
    console.warn("üö´ verifyToken: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
    return res.status(401).send("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞");
  }

  try {
    const decoded = await admin.auth().verifyIdToken(token);
    req.user = decoded;
    console.log("‚úÖ verifyToken: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, uid:", decoded.uid);
    next();
  } catch (err) {
    console.error("‚ùå verifyToken: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫", err);
    res.status(403).send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
  }
}

// === –£—Ç–∏–ª–∏—Ç—ã S3-–∑–∞–≥—Ä—É–∑–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è ===
async function uploadToS3(buffer, fileName, contentType) {
  await s3.send(new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: fileName,
    Body: buffer,
    ContentType: contentType,
    ACL: 'public-read'
  }));
  return `https://${BUCKET_NAME}.storage.yandexcloud.net/${fileName}`;
}

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è S3
async function uploadToS3WithRetry(buffer, fileName, contentType, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      return await uploadToS3(buffer, fileName, contentType);
    } catch (error) {
      if (attempt === retries) throw error;

      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3 (${attempt}/${retries})`);
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
  }
}

async function deleteFromS3(urls) {
  const keys = urls.map(url => {
    const parts = url.split(`${BUCKET_NAME}/`);
    return parts[1] ? { Key: parts[1] } : null;
  }).filter(Boolean);

  if (keys.length === 0) return;
  await s3.send(new DeleteObjectsCommand({
    Bucket: BUCKET_NAME,
    Delete: { Objects: keys }
  }));
}

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Firebase
async function getGroupWithCache(groupId) {
  const cacheKey = `group_${groupId}`;
  const cached = quickCache.get(cacheKey);

  if (cached && (Date.now() - cached.timestamp < 60000)) {
    return cached.data;
  }

  const groupSnap = await db.ref(`groups/${groupId}`).once('value');
  const groupData = groupSnap.val();

  if (groupData) {
    quickCache.set(cacheKey, {
      data: groupData,
      timestamp: Date.now()
    });
  }

  return groupData;
}

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceMetrics = {
  requests: 0,
  errors: 0,
  slowRequests: 0,
  startTime: Date.now()
};

// üî• –ò–ó–ú–ï–ù–ï–ù–û: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å health-check –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –ª–æ–≥–æ–≤
  if (req.url === '/health' || req.url === '/ping') {
    return next();
  }

  performanceMetrics.requests++; // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤

  const start = Date.now();
  const requestId = Math.random().toString(36).substring(7);

  if (process.env.NODE_ENV === 'development') {
    console.log(`üì® [${requestId}] ${req.method} ${req.url} - Started`);
  }

  res.on('finish', () => {
    const duration = Date.now() - start;
    const isSlow = duration > 1000; // üî• –ò–ó–ú–ï–ù–ï–ù–û: 1 —Å–µ–∫—É–Ω–¥–∞ –≤–º–µ—Å—Ç–æ 500ms

    if (isSlow) {
      performanceMetrics.slowRequests++; // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥—Å—á–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      console.warn(`üêå [${requestId}] SLOW: ${req.method} ${req.url} - ${duration}ms`);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –≤ development
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ [${requestId}] ${req.method} ${req.url} - ${duration}ms`);
    }
  });

  next();
});

// === –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ä–µ–±—ë–Ω–∫–∞ ===
app.post('/deleteUserByName', async (req, res) => {
  const fullName = req.body.fullName?.trim().toLowerCase();
  if (!fullName) return res.status(400).send("fullName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  try {
    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};
    let found = false;

    for (const [userId, user] of Object.entries(users)) {
      const name = user.name?.trim().toLowerCase();
      const role = user.role?.trim().toLowerCase();

      // –†–æ–¥–∏—Ç–µ–ª—å
      if (name === fullName && role === '—Ä–æ–¥–∏—Ç–µ–ª—å') {
        found = true;

        // 1. –£–¥–∞–ª—è–µ–º –¥–µ—Ç–µ–π –∏–∑ –≥—Ä—É–ø–ø –∏ S3
        if (user.children) {
          const filesToDelete = [];

          for (const [childId, child] of Object.entries(user.children)) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ childId (–∞ –Ω–µ –ø–æ –∏–º–µ–Ω–∏!)
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
          }

          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ S3
          if (filesToDelete.length > 0) {
            await deleteFromS3(filesToDelete);
          }
        }

        // 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        await db.ref(`users/${userId}`).remove();

        // 3. –£–¥–∞–ª—è–µ–º –∏–∑ Firebase Auth (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
        } catch (authError) {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:", authError.message);
        }

        return res.send("–†–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –¥–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã.");
      }

      // –ü–µ–¥–∞–≥–æ–≥
      if (name === fullName && role === '–ø–µ–¥–∞–≥–æ–≥') {
        found = true;

        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        const groupsSnap = await db.ref('groups').once('value');
        const groups = groupsSnap.val() || {};

        for (const [groupId, group] of Object.entries(groups)) {
          if (group.teachers?.[userId]) {
            await db.ref(`groups/${groupId}/teachers/${userId}`).remove();
          }
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.ref(`users/${userId}`).remove();

        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
        } catch (authError) {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth:", authError.message);
        }

        return res.send("–ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª—ë–Ω.");
      }

      // –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫ (–ø–æ–∏—Å–∫ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏)
      if (user.children) {
        for (const [childId, child] of Object.entries(user.children)) {
          if (child.fullName?.trim().toLowerCase() === fullName) {
            found = true;

            // –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
            }

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ S3
            const filesToDelete = [];
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
            if (filesToDelete.length > 0) {
              await deleteFromS3(filesToDelete);
            }

            // –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.ref(`users/${userId}/children/${childId}`).remove();

            return res.send("–†–µ–±—ë–Ω–æ–∫ —É–¥–∞–ª—ë–Ω.");
          }
        }
      }
    }

    if (!found) {
      res.status(404).send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  } catch (err) {
    performanceMetrics.errors++; // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ deleteUserByName:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + err.message);
  }
});

// === –ù–æ–≤—ã–π endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–±–µ–Ω–∫–∞ ===
app.post('/deleteChild', async (req, res) => {
  const { userId, childId } = req.body;

  if (!userId || !childId) {
    return res.status(400).json({ error: "userId –∏ childId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    console.log('=== DELETE CHILD DEBUG START ===');

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞
    const childRef = db.ref(`users/${userId}/children/${childId}`);
    const childSnap = await childRef.once('value');

    if (!childSnap.exists()) {
      return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const child = childSnap.val();
    const groupName = child.group;
    const childName = child.fullName.trim();

    console.log('üë∂ –ò–º—è —Ä–µ–±–µ–Ω–∫–∞:', `"${childName}"`);
    console.log('üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', groupName);

    // 2. –ù–∞—Ö–æ–¥–∏–º ID –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    let groupId = null;
    if (groupName) {
      console.log('üîç –ò—â–µ–º ID –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', groupName);

      const groupsRef = db.ref('groups');
      const groupsSnap = await groupsRef.once('value');
      const groups = groupsSnap.val() || {};

      console.log('–í—Å–µ –≥—Ä—É–ø–ø—ã:', JSON.stringify(groups, null, 2));

      for (const [id, groupData] of Object.entries(groups)) {
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É: ${id} -> ${groupData.name}`);
        if (groupData.name === groupName) {
          groupId = id;
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞! ID:', groupId);
          break;
        }
      }

      if (!groupId) {
        console.log('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', groupName);
        return res.status(404).json({ error: "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
    }

    // 3. –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
    console.log('üîç –ò—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ –≤ –≥—Ä—É–ø–ø–µ ID:', groupId);

    const groupChildrenRef = db.ref(`groups/${groupId}/children`);
    const groupChildrenSnap = await groupChildrenRef.once('value');
    const groupChildren = groupChildrenSnap.val() || {};

    console.log('üë• –î–µ—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ:', JSON.stringify(groupChildren, null, 2));

    let foundGroupChildId = null;
    for (const [groupChildId, groupChildName] of Object.entries(groupChildren)) {
      const trimmedGroupName = groupChildName.trim();
      console.log(`üîé –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: "${trimmedGroupName}" vs "${childName}"`);

      if (trimmedGroupName === childName) {
        foundGroupChildId = groupChildId;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! Key:', foundGroupChildId);
        break;
      }
    }

    if (foundGroupChildId) {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã');
      await groupChildrenRef.child(foundGroupChildId).remove();
      console.log('‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã');
    } else {
      console.log('‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ');
      return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ" });
    }

    // 4. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ S3
    const filesToDelete = [];
    if (child.avatarUrl) {
      filesToDelete.push(child.avatarUrl);
    }

    if (filesToDelete.length > 0) {
      await deleteFromS3(filesToDelete);
    }

    // 5. –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –±–∞–∑—ã —Ä–æ–¥–∏—Ç–µ–ª—è
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    await childRef.remove();

    console.log('=== DELETE CHILD DEBUG END ===');

    res.json({
      success: true,
      message: `–†–µ–±–µ–Ω–æ–∫ ${childName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`
    });

  } catch (err) {
    performanceMetrics.errors++;
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ deleteChild:', err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞" });
  }
});

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email ===
app.post("/update-user", async (req, res) => {
  try {
    const { fullName, newEmail } = req.body;
    if (!fullName || !newEmail) return res.status(400).json({ error: "fullName –∏ newEmail –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

    const snap = await db.ref("users").orderByChild("name").equalTo(fullName).once("value");
    if (!snap.exists()) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const users = snap.val();
    const keys = Object.keys(users);
    if (keys.length > 1) return res.status(400).json({ error: "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º" });

    const userKey = keys[0];
    const user = users[userKey];
    const userId = user.userId;
    if (!userId) return res.status(400).json({ error: "userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ" });

    await auth.updateUser(userId, { email: newEmail });
    await db.ref(`users/${userKey}`).update({ email: newEmail });

    res.json({ message: "Email –æ–±–Ω–æ–≤–ª–µ–Ω", userId, updatedUser: { name: fullName, email: newEmail } });
  } catch (err) {
    performanceMetrics.errors++;
    if (err.code === 'auth/email-already-exists') {
      return res.status(400).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
    }
    console.error("–û—à–∏–±–∫–∞ update-user:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message });
  }
});

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏) ===
app.post("/news", verifyToken, async (req, res) => {
  try {
    const { newsId, groupId, title, description, mediaUrls = [] } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !title || !description) {
      return res.status(400).json({ error: "groupId, title –∏ description –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    if (newsId) {
      // === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
      const ref = db.ref(`news/${groupId}/${newsId}`);
      const snap = await ref.once("value");
      const oldNews = snap.val();
      if (!oldNews) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      if (oldNews.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

      // –£–¥–∞–ª—è–µ–º –∏–∑ S3 —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
      const oldUrls = oldNews.mediaUrls || [];
      const keepSet = new Set(mediaUrls);
      const toDelete = oldUrls.filter(url => !keepSet.has(url));
      await deleteFromS3(toDelete);

      const newData = {
        title,
        description,
        mediaUrls,
        authorId,
        timestamp: Date.now(),
      };

      await ref.update(newData);
      return res.json({ success: true, updated: true });
    }

    // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
    const id = uuidv4();
    const ref = db.ref(`news/${groupId}/${id}`);

    const data = {
      title,
      description,
      mediaUrls,
      timestamp: Date.now(),
      authorId
    };

    await ref.set(data);
    return res.json({ success: true, id });

  } catch (err) {
    performanceMetrics.errors++;
    console.error("–û—à–∏–±–∫–∞ POST /news:", err);
    res.status(500).json({ error: err.message });
  }
});

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ groupId ===
app.get("/news", verifyToken, async (req, res) => {
  try {
    const groupId = req.query.groupId;
    if (!groupId) {
      return res.status(400).json({ error: "groupId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    const snap = await db.ref(`news/${groupId}`).once("value");
    const newsData = snap.val() || {};

    const newsList = Object.entries(newsData).map(([id, news]) => ({
      id,
      title: news.title,
      description: news.description,
      groupId: groupId,
      authorId: news.authorId,
      mediaUrls: news.mediaUrls || [],
      timestamp: news.timestamp || 0
    }));

    newsList.sort((a, b) => b.timestamp - a.timestamp);

    res.json(newsList);
  } catch (err) {
    performanceMetrics.errors++;
    console.error("–û—à–∏–±–∫–∞ GET /news:", err);
    res.status(500).json({ error: err.message });
  }
});

// === –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
app.post("/deleteNews", verifyToken, async (req, res) => {
  try {
    const { groupId, newsId } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !newsId) {
      return res.status(400).json({ error: "groupId –∏ newsId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const snap = await db.ref(`news/${groupId}/${newsId}`).once('value');
    const data = snap.val();
    if (!data) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

    if (data.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

    const urls = data.mediaUrls || [];
    await deleteFromS3(urls);
    await db.ref(`news/${groupId}/${newsId}`).remove();

    res.json({ success: true });
  } catch (err) {
    performanceMetrics.errors++;
    console.error("–û—à–∏–±–∫–∞ deleteNews:", err);
    res.status(500).json({ error: err.message });
  }
});

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3 ===
app.post('/generate-upload-url', verifyToken, async (req, res) => {
  console.log('=== /generate-upload-url: –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));

  try {
    const { fileName, fileType, groupId, isPrivateChat, context } = req.body;

    if (!fileName || !fileType) {
      console.log('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è fileName –∏–ª–∏ fileType');
      return res.status(400).json({ error: "fileName –∏ fileType –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const fileExtension = getFileExtension(fileType);
    let finalFileName = fileName;

    if (!finalFileName.includes('.') || !finalFileName.toLowerCase().endsWith(fileExtension.toLowerCase())) {
      const baseName = finalFileName.includes('.')
        ? finalFileName.substring(0, finalFileName.lastIndexOf('.'))
        : finalFileName;

      finalFileName = baseName + fileExtension;
      console.log('–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', finalFileName);
    }

    let folder;
    let finalGroupId = groupId;

    if (context === 'news') {
      folder = 'news/';
      console.log('–¢–∏–ø: –Ω–æ–≤–æ—Å—Ç—å');
    } else if (isPrivateChat === true) {
      folder = 'private-chats/';
      console.log('–¢–∏–ø: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (–ø–æ —Ñ–ª–∞–≥—É isPrivateChat)');
    } else if (groupId && groupId.startsWith('private_')) {
      folder = 'private-chats/';
      finalGroupId = groupId.replace('private_', '');
      console.log('–¢–∏–ø: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (legacy format)');
    } else if (groupId) {
      folder = 'group-chats/';
      console.log('–¢–∏–ø: –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç');
    } else {
      folder = 'misc/';
      console.log('–¢–∏–ø: –ø—Ä–æ—á–µ–µ (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)');
    }

    if (finalGroupId && folder !== 'news/') {
      const hasAccess = await checkChatAccess(req.user.uid, finalGroupId, folder === 'private-chats/');
      if (!hasAccess) {
        console.log('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', req.user.uid, '–Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É', finalGroupId);
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É" });
      }
      console.log('–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.uid);
    }

    const timestamp = Date.now();
    const uniqueId = uuidv4().substring(0, 8);
    const safeFileName = finalFileName.replace(/[^a-zA-Z0-9.-]/g, '_');
    const key = `${folder}${finalGroupId ? finalGroupId + '/' : ''}${timestamp}_${uniqueId}_${safeFileName}`;

    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞:', key);
    console.log('ContentType:', fileType);

    const signedUrlParams = {
      Bucket: BUCKET_NAME,
      Key: key,
      ContentType: String(fileType),
      ACL: "public-read"
    };

    const command = new PutObjectCommand(signedUrlParams);
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL...');

    const uploadUrl = await getSignedUrl(s3, command, { expiresIn: 300 });
    const fileUrl = `https://${BUCKET_NAME}.storage.yandexcloud.net/${key}`;

    console.log('‚úÖ Signed URL —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    console.log('üìÅ File URL:', fileUrl);

    res.json({
      success: true,
      uploadUrl,
      fileUrl,
      fileName: finalFileName,
      key,
      expiresIn: 300,
      expiresAt: Date.now() + 300000
    });

  } catch (err) {
    performanceMetrics.errors++;
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ upload URL:", err);

    if (err.name === 'CredentialsProviderError') {
      return res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ credentials"
      });
    }
    if (err.name === 'NoSuchBucket') {
      return res.status(500).json({
        success: false,
        error: `S3 bucket –Ω–µ –Ω–∞–π–¥–µ–Ω: ${BUCKET_NAME}`
      });
    }
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: " + err.message
      });
    }

    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
async function checkChatAccess(userId, chatId, isPrivate) {
  try {
    console.log(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
      userId,
      '–∫ —á–∞—Ç—É:',
      chatId,
      '—Ç–∏–ø:',
      isPrivate ? 'private' : 'group'
    );

    if (isPrivate) {
      const parts = chatId.split('_');
      const hasAccess = parts.includes(userId);
      console.log('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –¥–æ—Å—Ç—É–ø:', hasAccess, '—É—á–∞—Å—Ç–Ω–∏–∫–∏:', parts);
      return hasAccess;
    } else {
      // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      const groupData = await getGroupWithCache(chatId);

      if (!groupData) {
        console.log('–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', chatId);
        return false;
      }

      console.log('‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω');
      return true;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É:', error);
    return false;
  }
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞ –ø–æ chatId
async function isPrivateChatId(chatId) {
  try {
    if (chatId.includes('_')) {
      console.log("üîç ChatId —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç");

      const privateChatRef = db.ref(`chats/private/${chatId}`);
      const privateSnap = await privateChatRef.once('value');

      if (privateSnap.exists()) {
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å ID:", chatId);
        return true;
      }

      const groupChatRef = db.ref(`chats/groups/${chatId}`);
      const groupSnap = await groupChatRef.once('value');

      if (groupSnap.exists()) {
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å ID (—Å–æ–¥–µ—Ä–∂–∏—Ç '_'):", chatId);
        return false;
      }

      console.log("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ ID —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º");
      return true;
    }

    const groupChatRef = db.ref(`chats/groups/${chatId}`);
    const groupSnap = await groupChatRef.once('value');

    if (groupSnap.exists()) {
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å ID:", chatId);
      return false;
    }

    console.log("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö, –Ω–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö:", chatId);
    return false;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞:", error);
    return chatId.includes('_');
  }
}

// === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö ===
async function sendChatNotification({
  chatId,
  senderId,
  senderName,
  message,
  messageType,
  fileUrl,
  fileName,
  isPrivate
}) {
  try {
    console.log("üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞:", chatId);

    let recipients = [];
    let chatTitle = "";

    if (isPrivate) {
      const parts = chatId.split('_');
      const otherUserId = parts.find(id => id !== senderId);

      if (otherUserId) {
        const userSnap = await db.ref(`users/${otherUserId}`).once('value');
        const user = userSnap.val();
        if (user && user.fcmToken) {
          recipients.push({
            userId: otherUserId,
            name: user.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            fcmToken: user.fcmToken
          });
          chatTitle = user.name || "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç";
        }
      }
    } else {
      // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      const group = await getGroupWithCache(chatId);

      if (group) {
        chatTitle = group.name || "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç";

        if (group.teachers) {
          for (const [teacherId, teacherName] of Object.entries(group.teachers)) {
            if (teacherId !== senderId) {
              const teacherSnap = await db.ref(`users/${teacherId}`).once('value');
              const teacher = teacherSnap.val();
              if (teacher && teacher.fcmToken) {
                recipients.push({
                  userId: teacherId,
                  name: teacherName,
                  fcmToken: teacher.fcmToken
                });
              }
            }
          }
        }

        if (group.children) {
          const usersSnap = await db.ref('users').once('value');
          const users = usersSnap.val() || {};

          for (const [userId, user] of Object.entries(users)) {
            if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children && userId !== senderId) {
              for (const [childId, child] of Object.entries(user.children)) {
                if (group.children[childId]) {
                  if (user.fcmToken) {
                    recipients.push({
                      userId: userId,
                      name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
                      fcmToken: user.fcmToken
                    });
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

    console.log(`üì® –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${recipients.length}`);

    let successful = 0;
    for (const recipient of recipients) {
      try {
        const messagePayload = {
          token: recipient.fcmToken,
          notification: {
            title: `üí¨ ${isPrivate ? senderName : chatTitle}`,
            body: messageType === 'text' ? message : `üìé ${getFileTypeText(messageType)}`
          },
          data: {
            type: "chat",
            chatId: chatId,
            senderId: senderId,
            senderName: senderName,
            message: message,
            isGroup: String(!isPrivate),
            timestamp: String(Date.now())
          }
        };

        await admin.messaging().send(messagePayload);
        successful++;
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${recipient.name}`);
      } catch (tokenError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${recipient.name}:`, tokenError.message);

        if (tokenError.code === "messaging/registration-token-not-registered") {
          await removeInvalidToken(recipient.fcmToken);
        }
      }
    }

    console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${successful}/${recipients.length}`);
    return { successful, total: recipients.length };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendChatNotification:", error);
    return { successful: 0, total: 0 };
  }
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ ===
function getFileTypeText(messageType) {
  switch (messageType) {
    case 'image': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    case 'video': return '–í–∏–¥–µ–æ';
    case 'audio': return '–ê—É–¥–∏–æ';
    case 'file': return '–§–∞–π–ª';
    default: return '–§–∞–π–ª';
  }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º ===
app.post("/send-message", verifyToken, async (req, res) => {
  try {
    const { chatId, message, messageType = "text", fileUrl, fileName } = req.body;
    const senderId = req.user.uid;

    console.log("=== üì® –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===");
    console.log("üë§ –û—Ç:", senderId);
    console.log("üí¨ –¢–µ–∫—Å—Ç:", message);
    console.log("üÜî ChatId:", chatId);
    console.log("üìÅ –¢–∏–ø:", messageType);
    console.log("üåê File:", fileUrl);

    if (!chatId || !message) {
      return res.status(400).json({ error: "chatId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const senderSnap = await db.ref(`users/${senderId}`).once('value');
    const sender = senderSnap.val();
    const senderName = sender?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

    const messageId = uuidv4();
    const messageData = {
      id: messageId,
      senderId,
      senderName,
      text: message,
      timestamp: Date.now(),
      fileUrl: fileUrl || null,
      fileType: messageType,
      fileName: fileName || null
    };

    const isPrivateChat = await isPrivateChatId(chatId);
    console.log("üîç –¢–∏–ø —á–∞—Ç–∞:", isPrivateChat ? "PRIVATE" : "GROUP");

    let chatRef;
    if (isPrivateChat) {
      chatRef = db.ref(`chats/private/${chatId}/messages/${messageId}`);
      console.log("üìÅ –ü—É—Ç—å: chats/private/");
    } else {
      chatRef = db.ref(`chats/groups/${chatId}/messages/${messageId}`);
      console.log("üìÅ –ü—É—Ç—å: chats/groups/");
    }

    await chatRef.set(messageData);
    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firebase");

    await sendChatNotification({
      chatId,
      senderId,
      senderName,
      message,
      messageType,
      fileUrl,
      fileName,
      isPrivate: isPrivateChat
    });

    console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");

    res.json({
      success: true,
      messageId,
      timestamp: messageData.timestamp
    });

  } catch (err) {
    performanceMetrics.errors++;
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    res.status(500).json({ error: err.message });
  }
});

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.post("/save-fcm-token", verifyToken, async (req, res) => {
  try {
    const { fcmToken } = req.body;
    const userId = req.user.uid;

    if (!fcmToken) {
      return res.status(400).json({ error: "fcmToken –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

    await db.ref(`users/${userId}`).update({
      fcmToken,
      fcmTokenUpdated: Date.now()
    });

    console.log("‚úÖ FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
    res.json({ success: true });

  } catch (err) {
    performanceMetrics.errors++;
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:", err);
    res.status(500).json({ error: err.message });
  }
});

// === –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞ ===
async function removeInvalidToken(invalidToken) {
  try {
    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞:", invalidToken.substring(0, 15) + "...");

    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};

    for (const [userId, user] of Object.entries(users)) {
      if (user.fcmToken === invalidToken) {
        await db.ref(`users/${userId}`).update({ fcmToken: null });
        console.log("‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
        return { success: true, userId };
      }
    }

    console.log("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    return { success: false, message: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" };

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", err);
    return { success: false, error: err.message };
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã ===
async function getGroupName(groupId) {
  try {
    // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    const groupData = await getGroupWithCache(groupId);
    const groupName = groupData?.name || `–ì—Ä—É–ø–ø–∞ ${groupId}`;
    console.log("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–µ–Ω–æ:", groupName);
    return groupName;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:", error);
    return `–ì—Ä—É–ø–ø–∞ ${groupId}`;
  }
}

// === –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ ID –≥—Ä—É–ø–ø—ã ===
async function findParentsByGroupId(groupId) {
  try {
    console.log("üîç –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã:", groupId);

    // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    const groupData = await getGroupWithCache(groupId);
    const childrenInGroup = groupData?.children || {};
    const childIds = Object.keys(childrenInGroup);

    console.log("üë∂ –î–µ—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ:", childIds.length, childIds);

    if (childIds.length === 0) return [];

    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};
    const parents = [];
    const foundParentIds = new Set();

    for (const [userId, user] of Object.entries(users)) {
      if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children) {

        const userDataSnap = await db.ref(`users/${userId}`).once('value');
        const userData = userDataSnap.val() || {};

        for (const childId of childIds) {
          const childNameInGroup = childrenInGroup[childId];

          for (const [parentChildId, parentChildData] of Object.entries(user.children)) {
            if (parentChildData && parentChildData.fullName === childNameInGroup) {

              if (!foundParentIds.has(userId)) {
                parents.push({
                  userId: userId,
                  name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
                  fcmToken: user.fcmToken || null,
                  childId: parentChildId,
                  childName: parentChildData.fullName,
                  childBirthDate: parentChildData.birthDate || "",
                  childGroup: groupId
                });
                foundParentIds.add(userId);
                console.log(`   ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï: ${user.name} -> ${parentChildData.fullName}`);
                break;
              }
            }
          }
        }
      }
    }

    console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: ${parents.length}`);
    return parents;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:", error);
    return [];
  }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏–∏ ===
async function sendEventNotifications({
  parents,
  groupId,
  groupName,
  eventId,
  title,
  time,
  place,
  comments,
  date,
  notificationBody
}) {
  try {
    const parentsWithTokens = parents.filter(parent => parent.fcmToken && parent.fcmToken.trim() !== "");
    console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${parentsWithTokens.length} —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏`);

    let successful = 0;
    let failed = 0;
    const errors = [];

    for (const parent of parentsWithTokens) {
      try {
        console.log(`‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${parent.name}, —Ç–æ–∫–µ–Ω:`, parent.fcmToken.substring(0, 15) + "...");

        const messagePayload = {
          token: parent.fcmToken,
          notification: {
            title: "üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
            body: notificationBody
          },
          data: {
            type: "new_event",
            autoOpenFragment: "events",
            groupId: String(groupId || ""),
            groupName: String(groupName || ""),
            eventId: String(eventId || ""),
            title: String(title || ""),
            time: String(time || ""),
            place: String(place || ""),
            comments: String(comments || ""),
            date: String(date || ""),
            timestamp: String(Date.now()),

            childId: parent.childId || "",
            userId: parent.userId || "",
            childFullName: parent.childName || "",
            childGroup: String(groupName || ""),
            childBirthDate: parent.childBirthDate || ""
          }
        };

        console.log("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é FCM payload –¥–ª—è", parent.name);

        const response = await admin.messaging().send(messagePayload);

        successful++;
        console.log("‚úÖ –ü—É—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è", parent.name, "| response:", response);

      } catch (tokenError) {
        failed++;
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è", parent.name, tokenError.message);

        errors.push({
          parent: parent.name,
          error: tokenError.message,
          code: tokenError.code
        });

        if (tokenError.code === "messaging/registration-token-not-registered") {
          const removeResult = await removeInvalidToken(parent.fcmToken);
          console.log(`üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:`, removeResult);
        }
      }
    }

    console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: –£—Å–ø–µ—à–Ω–æ ${successful}, –ù–µ—É–¥–∞—á–Ω–æ ${failed}`);
    return { successful, failed, totalTokens: parentsWithTokens.length, errors };

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendEventNotifications:", err);
    return { successful: 0, failed: parents.length, errors: [err.message] };
  }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ ===
app.post("/send-event-notification", verifyToken, async (req, res) => {
  console.log("üü¢üü¢üü¢ –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê /send-event-notification üü¢üü¢üü¢");
  console.log("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", JSON.stringify(req.body, null, 2));

  try {
    const {
      groupId,
      groupName,
      eventId,
      title,
      time,
      place,
      comments,
      date
    } = req.body;

    if (!groupId || !eventId || !title) {
      console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
      return res.status(400).json({
        error: "groupId, eventId, title –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    console.log("üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏:");
    console.log("   - –ì—Ä—É–ø–ø–∞:", groupId, groupName);
    console.log("   - –°–æ–±—ã—Ç–∏–µ:", title, time);
    console.log("   - –î–∞—Ç–∞:", date);

    const actualGroupName = await getGroupName(groupId);
    console.log("   - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", actualGroupName);

    const parents = await findParentsByGroupId(groupId);

    if (parents.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:", groupId);
      return res.json({
        success: true,
        message: "–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
      });
    }

    console.log("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏:", parents.length);
    console.log("üìã –°–ø–∏—Å–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:");
    parents.forEach((parent, index) => {
      console.log(`   ${index + 1}. ${parent.name} (—Ä–µ–±–µ–Ω–æ–∫: ${parent.childName})`);
    });

    const parentsWithTokens = parents.filter(parent => parent.fcmToken && parent.fcmToken.trim() !== "");

    parents.forEach(parent => {
      if (parent.fcmToken && parent.fcmToken.trim() !== "") {
        console.log("‚úÖ –¢–æ–∫–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è:", parent.userId, parent.name, "- —Ä–µ–±–µ–Ω–æ–∫:", parent.childName);
      } else {
        console.log("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ —É —Ä–æ–¥–∏—Ç–µ–ª—è:", parent.name);
      }
    });

    console.log(`üì± –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${parentsWithTokens.length} –∏–∑ ${parents.length} —Ä–æ–¥–∏—Ç–µ–ª–µ–π`);

    const notificationBody = formatEventNotification(title, time, place, actualGroupName);
    console.log("üìù –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", notificationBody);

    const sendResults = await sendEventNotifications({
      parents: parents,
      groupId,
      groupName: actualGroupName,
      eventId,
      title,
      time,
      place,
      comments,
      date,
      notificationBody
    });

    console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ${sendResults.successful} —Ä–æ–¥–∏—Ç–µ–ª–µ–π`);

    res.json({
      success: true,
      message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${sendResults.successful} —Ä–æ–¥–∏—Ç–µ–ª—è–º`,
      recipients: sendResults.successful,
      totalParents: parents.length,
      parentsWithTokens: sendResults.successful,
      statistics: sendResults,
      parentDetails: parents.map(p => ({
        name: p.name,
        child: p.childName,
        hasToken: !!(p.fcmToken && p.fcmToken.trim() !== "")
      }))
    });

  } catch (err) {
    performanceMetrics.errors++;
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏:", err);
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
    });
  }
});

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
function formatEventNotification(title, time, place, groupName) {
  let notification = `üìÖ ${title}`;

  if (time) {
    notification += ` –≤ ${time}`;
  }

  if (place) {
    notification += ` (${place})`;
  }

  if (groupName) {
    notification += ` ‚Ä¢ ${groupName}`;
  }

  return notification;
}

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫
app.get("/metrics", (req, res) => {
  const uptime = Date.now() - performanceMetrics.startTime;
  const requestsPerMinute = (performanceMetrics.requests / (uptime / 60000)).toFixed(2);
  const errorRate = performanceMetrics.requests > 0
    ? ((performanceMetrics.errors / performanceMetrics.requests) * 100).toFixed(2)
    : 0;

  res.json({
    uptime: Math.round(uptime / 1000) + 's',
    total_requests: performanceMetrics.requests,
    requests_per_minute: requestsPerMinute,
    error_rate: errorRate + '%',
    slow_requests: performanceMetrics.slowRequests,
    memory: {
      rss: Math.round(process.memoryUsage().rss / 1024 / 1024) + 'MB',
      heap: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB'
    },
    cache: {
      quick_cache_size: quickCache.size
    }
  });
});

// üî• –ò–ó–ú–ï–ù–ï–ù–û: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π keep-alive
const keepAlive = () => {
  setInterval(async () => {
    try {
      const https = require('https');
      const options = {
        hostname: process.env.RENDER_EXTERNAL_HOSTNAME || `firebase-admin-server-6e6o.onrender.com`,
        port: 443,
        path: '/ping', // üî• –ò–ó–ú–ï–ù–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º /ping –≤–º–µ—Å—Ç–æ /health
        method: 'GET',
        timeout: 5000 // üî• –ò–ó–ú–ï–ù–ï–ù–û: —É–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
      };

      const req = https.request(options, (res) => {
        console.log('üíì Keep-alive —Å—Ç–∞—Ç—É—Å:', res.statusCode);
      });

      req.on('error', (err) => {
        console.log('üíì Keep-alive –æ—à–∏–±–∫–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ):', err.message);
      });

      req.on('timeout', () => {
        console.log('üíì Keep-alive —Ç–∞–π–º–∞—É—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
        req.destroy();
      });

      req.end();
    } catch (error) {
      console.log('üíì Keep-alive —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  }, 4 * 60 * 1000); // 4 –º–∏–Ω—É—Ç—ã
};

app.get("/health", (req, res) => {
  const memory = process.memoryUsage();
  res.json({
    status: "OK",
    timestamp: Date.now(),
    memory: {
      rss: Math.round(memory.rss / 1024 / 1024) + "MB",
      heap: Math.round(memory.heapUsed / 1024 / 1024) + "MB",
      external: Math.round(memory.external / 1024 / 1024) + "MB"
    },
    uptime: Math.round(process.uptime()) + "s",
    quickCacheSize: quickCache.size
  });
});

// === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ ===
app.get("/info", (req, res) => {
  console.log("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ");
  res.json({
    service: "Firebase Admin Notification Server",
    version: "1.0.0",
    endpoints: {
      "POST /send-event-notification": "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö",
      "GET /health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞",
      "GET /info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
      "GET /ping": "–ü–∏–Ω–≥ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π",
      "GET /stress-test": "–¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏",
      "GET /metrics": "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" // üî• –î–û–ë–ê–í–õ–ï–ù–û
    },
    features: [
      "–û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –í–°–ï–ú —Ä–æ–¥–∏—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤",
      "–ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–µ",
      "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
      "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Firebase –∑–∞–ø—Ä–æ—Å–æ–≤" // üî• –î–û–ë–ê–í–õ–ï–ù–û
    ]
  });
});

app.get("/ping", async (req, res) => {
  const start = Date.now();
  const diagnostics = {};

  try {
    const fbStart = Date.now();
    await db.ref('.info/connected').once('value');
    diagnostics.firebase = `${Date.now() - fbStart}ms`;

    const s3Start = Date.now();
    try {
      await s3.send(new PutObjectCommand({
        Bucket: BUCKET_NAME,
        Key: 'ping-test',
        Body: Buffer.from('test'),
        ContentType: 'text/plain'
      })).catch(() => {});
      diagnostics.s3 = `${Date.now() - s3Start}ms`;
    } catch (s3Error) {
      diagnostics.s3 = `error: ${s3Error.message}`;
    }

    const cacheStart = Date.now();
    const cacheSize = quickCache.size;
    diagnostics.cache = `${Date.now() - cacheStart}ms (size: ${cacheSize})`;

    diagnostics.total = `${Date.now() - start}ms`;

    res.json({
      pong: Date.now(),
      simple: true,
      diagnostics
    });

  } catch (error) {
    res.status(500).json({
      error: "Diagnostics failed",
      message: error.message
    });
  }
});

// –£–ª—É—á—à–µ–Ω–Ω—ã–π stress-test
app.get("/stress-test", async (req, res) => {
  const start = Date.now();

  const tests = [];
  tests.push({ name: "simple_response", time: "0ms" });

  const fbStart = Date.now();
  try {
    await db.ref('.info/connected').once('value');
    tests.push({ name: "firebase_connect", time: `${Date.now() - fbStart}ms` });
  } catch (error) {
    tests.push({ name: "firebase_connect", time: `error: ${error.message}` });
  }

  const memory = process.memoryUsage();

  const eventLoopStart = Date.now();
  await new Promise(resolve => setImmediate(resolve));
  const eventLoopLag = Date.now() - eventLoopStart;

  res.json({
    status: "OK",
    timestamp: Date.now(),
    total_time: `${Date.now() - start}ms`,
    memory: {
      rss: Math.round(memory.rss / 1024 / 1024) + "MB",
      heap: Math.round(memory.heapUsed / 1024 / 1024) + "MB",
      heap_total: Math.round(memory.heapTotal / 1024 / 1024) + "MB"
    },
    performance: {
      uptime: Math.round(process.uptime()) + "s",
      event_loop_lag: `${eventLoopLag}ms`,
      quick_cache_size: quickCache.size
    },
    tests
  });
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
app.get("/performance", (req, res) => {
  const memory = process.memoryUsage();
  const stats = {
    server: {
      uptime: Math.round(process.uptime()) + "s",
      node_version: process.version,
      platform: process.platform
    },
    memory: {
      rss_mb: Math.round(memory.rss / 1024 / 1024),
      heap_used_mb: Math.round(memory.heapUsed / 1024 / 1024),
      heap_total_mb: Math.round(memory.heapTotal / 1024 / 1024),
      external_mb: Math.round(memory.external / 1024 / 1024)
    },
    cache: {
      quick_cache_size: quickCache.size
    },
    environment: {
      port: process.env.PORT || 3000,
      node_env: process.env.NODE_ENV || 'development'
    }
  };

  res.json(stats);
});

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.get("/", (req, res) => {
  res.json({
    message: "Firebase Admin Server is running",
    timestamp: Date.now(),
    endpoints: [
      "/health - Health check",
      "/info - Server information",
      "/ping - Ping with diagnostics",
      "/stress-test - Load test",
      "/performance - Performance stats",
      "/metrics - Performance metrics" // üî• –î–û–ë–ê–í–õ–ï–ù–û
    ]
  });
});

const PORT = process.env.PORT || 3000;

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ Server started on port ${PORT}`);
  console.log(`‚úÖ Keep-alive started`);
  console.log(`‚úÖ Performance monitoring enabled`);
  console.log(`‚úÖ Firebase caching enabled`); // üî• –î–û–ë–ê–í–õ–ï–ù–û
  keepAlive();
});

// Graceful shutdown –¥–ª—è Render
server.keepAliveTimeout = 60000;
server.headersTimeout = 65000;

process.on('SIGTERM', () => {
  console.log('üîÑ SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('‚úÖ HTTP server closed');
    process.exit(0);
  });

  setTimeout(() => {
    console.log('‚ö†Ô∏è Forcing shutdown');
    process.exit(1);
  }, 10000);
});