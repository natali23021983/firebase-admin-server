require('dotenv').config();
const express = require('express');
const cors = require("cors");
const admin = require('firebase-admin');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const { S3Client, PutObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } = require("@aws-sdk/client-s3");
const bodyParser = require("body-parser");
const path = require('path');
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS ===
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// === Multer —Å –ª–∏–º–∏—Ç–∞–º–∏ ===
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
    files: 5
  }
});

// === MIME types mapping ===
const mimeTypeMapping = {
  'image/jpeg': '.jpg',
  'image/png': '.png',
  'image/gif': '.gif',
  'image/webp': '.webp',
  'application/pdf': '.pdf',
  'video/mp4': '.mp4',
  'video/quicktime': '.mov',
  'video/x-msvideo': '.avi',
  'video/x-matroska': '.mkv',
  'application/msword': '.doc',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
  'application/vnd.ms-excel': '.xls',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
  'application/vnd.ms-powerpoint': '.ppt',
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
  'application/zip': '.zip',
  'application/x-rar-compressed': '.rar',
  'text/plain': '.txt',
  'audio/mpeg': '.mp3',
  'audio/wav': '.wav'
};

// === Firebase Admin SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ ===
let firebaseInitialized = false;
let db = null;
let auth = null;

try {
  const base64 = process.env.FIREBASE_CONFIG;
  if (!base64) {
    console.error("‚ùå FIREBASE_CONFIG –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env");
    process.exit(1);
  }

  const serviceAccount = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));

  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: process.env.FIREBASE_DB_URL
  });

  db = admin.database();
  auth = admin.auth();
  firebaseInitialized = true;
  console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

} catch (err) {
  console.error("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", err);
  process.exit(1);
}

// === –Ø–Ω–¥–µ–∫—Å S3 ===
const s3 = new S3Client({
  region: process.env.YC_S3_REGION || "ru-central1",
  endpoint: process.env.YC_S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY,
    secretAccessKey: process.env.YC_SECRET_KEY,
  },
});

const BUCKET_NAME = process.env.YC_S3_BUCKET;

if (!BUCKET_NAME) {
  console.error("‚ùå YC_S3_BUCKET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
  process.exit(1);
}

console.log("‚úÖ S3 –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, bucket:", BUCKET_NAME);


// === Middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
app.use((req, res, next) => {
  const start = Date.now();
  console.log(`üì• ${req.method} ${req.path} - ${new Date().toISOString()}`);

  res.on('finish', () => {
    const duration = Date.now() - start;
    console.log(`üì§ ${req.method} ${req.path} ${res.statusCode} - ${duration}ms`);
  });

  next();
});


// === Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase-—Ç–æ–∫–µ–Ω–∞ ===
async function verifyToken(req, res, next) {
  if (!firebaseInitialized) {
    return res.status(503).json({ error: "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" });
  }

  const authHeader = req.headers.authorization || "";
  const token = authHeader.startsWith("Bearer ") ? authHeader.split("Bearer ")[1] : null;

  if (!token) {
    console.warn("üö´ verifyToken: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
    return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" });
  }

  try {
    const decoded = await admin.auth().verifyIdToken(token);
    req.user = decoded;
    console.log("‚úÖ verifyToken: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, uid:", decoded.uid);
    next();
  } catch (err) {
    console.error("‚ùå verifyToken: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫", err);
    res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω" });
  }
}


// === –£—Ç–∏–ª–∏—Ç—ã S3-–∑–∞–≥—Ä—É–∑–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ===
async function uploadToS3(buffer, fileName, contentType) {
  try {
    console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ S3: ${fileName}`);

    await s3.send(new PutObjectCommand({
      Bucket: BUCKET_NAME,
      Key: fileName,
      Body: buffer,
      ContentType: contentType,
      ACL: 'public-read'
    }));

    const fileUrl = `https://${BUCKET_NAME}.storage.yandexcloud.net/${fileName}`;
    console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${fileUrl}`);

    return fileUrl;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: ${fileName}`, error);
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
  }
}

async function deleteFromS3(urls) {
  if (!urls || urls.length === 0) return;

  try {
    const keys = urls.map(url => {
      const parts = url.split(`${BUCKET_NAME}/`);
      return parts[1] ? { Key: parts[1] } : null;
    }).filter(Boolean);

    if (keys.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
      return;
    }

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ S3: ${keys.length} —Ñ–∞–π–ª–æ–≤`);

    await s3.send(new DeleteObjectsCommand({
      Bucket: BUCKET_NAME,
      Delete: { Objects: keys }
    }));

    console.log(`‚úÖ –§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ S3`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3:", error);
    throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${error.message}`);
  }
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ä–µ–±—ë–Ω–∫–∞ ===
app.post('/deleteUserByName', async (req, res) => {
  try {
    const fullName = req.body.fullName?.trim().toLowerCase();
    if (!fullName) {
      return res.status(400).json({ error: "fullName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    console.log(`üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${fullName}`);

    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};
    let found = false;

    for (const [userId, user] of Object.entries(users)) {
      const name = user.name?.trim().toLowerCase();
      const role = user.role?.trim().toLowerCase();

      // –†–æ–¥–∏—Ç–µ–ª—å
      if (name === fullName && role === '—Ä–æ–¥–∏—Ç–µ–ª—å') {
        found = true;
        console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${userId}`);

        // 1. –£–¥–∞–ª—è–µ–º –¥–µ—Ç–µ–π –∏–∑ –≥—Ä—É–ø–ø –∏ S3
        if (user.children) {
          const filesToDelete = [];

          for (const [childId, child] of Object.entries(user.children)) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ childId
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
              console.log(`‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: ${child.group}`);
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
          }

          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ S3
          if (filesToDelete.length > 0) {
            await deleteFromS3(filesToDelete);
          }
        }

        // 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        await db.ref(`users/${userId}`).remove();

        // 3. –£–¥–∞–ª—è–µ–º –∏–∑ Firebase Auth (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ Auth: ${userId}`);
        } catch (authError) {
          console.log("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:", authError.message);
        }

        return res.json({ success: true, message: "–†–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –¥–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã." });
      }

      // –ü–µ–¥–∞–≥–æ–≥
      if (name === fullName && role === '–ø–µ–¥–∞–≥–æ–≥') {
        found = true;
        console.log(`üë®‚Äçüè´ –ù–∞–π–¥–µ–Ω –ø–µ–¥–∞–≥–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${userId}`);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        const groupsSnap = await db.ref('groups').once('value');
        const groups = groupsSnap.val() || {};

        for (const [groupId, group] of Object.entries(groups)) {
          if (group.teachers?.[userId]) {
            await db.ref(`groups/${groupId}/teachers/${userId}`).remove();
            console.log(`‚úÖ –ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: ${groupId}`);
          }
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.ref(`users/${userId}`).remove();

        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
          console.log(`‚úÖ –ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª–µ–Ω –∏–∑ Auth: ${userId}`);
        } catch (authError) {
          console.log("‚ÑπÔ∏è –ü–µ–¥–∞–≥–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth:", authError.message);
        }

        return res.json({ success: true, message: "–ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª—ë–Ω." });
      }

      // –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫ (–ø–æ–∏—Å–∫ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏)
      if (user.children) {
        for (const [childId, child] of Object.entries(user.children)) {
          if (child.fullName?.trim().toLowerCase() === fullName) {
            found = true;
            console.log(`üë∂ –ù–∞–π–¥–µ–Ω —Ä–µ–±–µ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${childId}`);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
              console.log(`‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: ${child.group}`);
            }

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ S3
            const filesToDelete = [];
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
            if (filesToDelete.length > 0) {
              await deleteFromS3(filesToDelete);
            }

            // –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.ref(`users/${userId}/children/${childId}`).remove();

            return res.json({ success: true, message: "–†–µ–±—ë–Ω–æ–∫ —É–¥–∞–ª—ë–Ω." });
          }
        }
      }
    }

    if (!found) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", fullName);
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ deleteUserByName:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + err.message });
  }
});


// === endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–±–µ–Ω–∫–∞ ===
app.post('/deleteChild', async (req, res) => {
  try {
    const { userId, childId } = req.body;

    if (!userId || !childId) {
      return res.status(400).json({ error: "userId –∏ childId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞:', { userId, childId });

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞
    const childRef = db.ref(`users/${userId}/children/${childId}`);
    const childSnap = await childRef.once('value');

    if (!childSnap.exists()) {
      return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const child = childSnap.val();
    const groupName = child.group;
    const childName = child.fullName.trim();

    console.log('üë∂ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞:', childName, '–ì—Ä—É–ø–ø–∞:', groupName);

    // 2. –ù–∞—Ö–æ–¥–∏–º ID –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    let groupId = null;
    if (groupName) {
      console.log('üîç –ò—â–µ–º ID –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', groupName);

      const groupsRef = db.ref('groups');
      const groupsSnap = await groupsRef.once('value');
      const groups = groupsSnap.val() || {};

      console.log('–í—Å–µ –≥—Ä—É–ø–ø—ã:', JSON.stringify(groups, null, 2));

      for (const [id, groupData] of Object.entries(groups)) {
             if (groupData.name === groupName) {
               groupId = id;
               console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ ID:', groupId);
               break;
             }
      }


      if (!groupId) {
        console.log('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', groupName);
        return res.status(404).json({ error: "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
    }

    // 3. –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
    console.log('üîç –ò—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ –≤ –≥—Ä—É–ø–ø–µ ID:', groupId);

    if (groupId) {
       const groupChildrenRef = db.ref(`groups/${groupId}/children`);
       const groupChildrenSnap = await groupChildrenRef.once('value');
       const groupChildren = groupChildrenSnap.val() || {};

       // –ò—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –≥—Ä—É–ø–ø–µ
       let foundGroupChildId = null;
       for (const [groupChildId, groupChildName] of Object.entries(groupChildren)) {
          if (groupChildName.trim() === childName) {
              foundGroupChildId = groupChildId;
              break;
          }
       }

        console.log('üë• –î–µ—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ:', JSON.stringify(groupChildren, null, 2));

        if (foundGroupChildId) {
            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã');
            await groupChildrenRef.child(foundGroupChildId).remove();
            console.log('‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã');
        } else {
            console.log('‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ');
            return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ" });
        }
    }

    // 4. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ S3
    const filesToDelete = [];
    if (child.avatarUrl) {
      filesToDelete.push(child.avatarUrl);
    }

    if (filesToDelete.length > 0) {
      await deleteFromS3(filesToDelete);
    }

    // 5. –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –±–∞–∑—ã —Ä–æ–¥–∏—Ç–µ–ª—è
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    await childRef.remove();

    console.log('‚úÖ –†–µ–±–µ–Ω–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω');

    res.json({
      success: true,
      message: `–†–µ–±–µ–Ω–æ–∫ ${childName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ deleteChild:', err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞: " + err.message });
  }
});

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email ===
app.post("/update-user", async (req, res) => {
  try {
    const { fullName, newEmail } = req.body;
    if (!fullName || !newEmail) {
        return res.status(400).json({ error: "fullName –∏ newEmail –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    console.log(`‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ email: ${fullName} -> ${newEmail}`);

    const snap = await db.ref("users").orderByChild("name").equalTo(fullName).once("value");
    if (!snap.exists()) {
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const users = snap.val();
    const keys = Object.keys(users);
    if (keys.length > 1) {
        return res.status(400).json({ error: "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º" });
    }

    const userKey = keys[0];
    const user = users[userKey];
    const userId = user.userId;

    if (!userId) {
        return res.status(400).json({ error: "userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ" });
    }

    await auth.updateUser(userId, { email: newEmail });
    await db.ref(`users/${userKey}`).update({ email: newEmail });

    console.log(`‚úÖ Email –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

    res.json({
          success: true,
          message: "Email –æ–±–Ω–æ–≤–ª–µ–Ω",
          userId,
          updatedUser: { name: fullName, email: newEmail }
        });
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ update-user:", err);

        if (err.code === 'auth/email-already-exists') {
          return res.status(400).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
        }

        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message });
      }
    });

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏) ===

app.post("/news", verifyToken, async (req, res) => {
  try {
    const { newsId, groupId, title, description, mediaUrls = [] } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !title || !description) {
      return res.status(400).json({ error: "groupId, title –∏ description –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    console.log(`üì∞ ${newsId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–°–æ–∑–¥–∞–Ω–∏–µ'} –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${groupId}`);

    if (newsId) {
      // === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
      const ref = db.ref(`news/${groupId}/${newsId}`);
      const snap = await ref.once("value");
      const oldNews = snap.val();
      if (!oldNews) {
        return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      if (oldNews.authorId !== authorId) {
        return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" });
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ S3 —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
      const oldUrls = oldNews.mediaUrls || [];
      const keepSet = new Set(mediaUrls);
      const toDelete = oldUrls.filter(url => !keepSet.has(url));

      if (toDelete.length > 0) {
        await deleteFromS3(toDelete);
      }

      const newData = {
        title,
        description,
        mediaUrls,
        authorId,
        timestamp: Date.now(),
      };

      await ref.update(newData);
      console.log(`‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${newsId}`);

      return res.json({ success: true, updated: true });
    }

    // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
    const id = uuidv4();
    const ref = db.ref(`news/${groupId}/${id}`);

    const data = {
      title,
      description,
      mediaUrls,
      timestamp: Date.now(),
      authorId
    };

    await ref.set(data);
    console.log(`‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞: ${id}`);

    return res.json({ success: true, id });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ POST /news:", err);
    res.status(500).json({ error: err.message });
  }
});


// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ groupId ===
app.get("/news", verifyToken, async (req, res) => {
  try {
    const groupId = req.query.groupId;
    if (!groupId) {
      return res.status(400).json({ error: "groupId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    console.log(`üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã: ${groupId}`);

    const snap = await db.ref(`news/${groupId}`).once("value");
    const newsData = snap.val() || {};

    const newsList = Object.entries(newsData).map(([id, news]) => ({
      id,
      title: news.title,
      description: news.description,
      groupId: groupId,
      authorId: news.authorId,
      mediaUrls: news.mediaUrls || [],
      timestamp: news.timestamp || 0
    }));

    newsList.sort((a, b) => b.timestamp - a.timestamp);

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${newsList.length}`);

    res.json(newsList);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ GET /news:", err);
    res.status(500).json({ error: err.message });
  }
});


// === –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
app.post("/deleteNews", verifyToken, async (req, res) => {
  try {
    const { groupId, newsId } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !newsId) {
      return res.status(400).json({ error: "groupId –∏ newsId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: ${newsId} –∏–∑ –≥—Ä—É–ø–ø—ã: ${groupId}`);

    const snap = await db.ref(`news/${groupId}/${newsId}`).once('value');
    const data = snap.val();

    if (!data) {
        return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    if (data.authorId !== authorId) {
        return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });
    }

    const urls = data.mediaUrls || [];
    if (urls.length > 0) {
      await deleteFromS3(urls);
    }

    await db.ref(`news/${groupId}/${newsId}`).remove();

    console.log(`‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞: ${newsId}`);

    res.json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ deleteNews:", err);
    res.status(500).json({ error: err.message });
  }
});



// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3 ===
app.post('/generate-upload-url', verifyToken, async (req, res) => {
  console.log('=== /generate-upload-url: –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));

  try {
    const { fileName, fileType, groupId, isPrivateChat, context } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!fileName || !fileType) {
      console.log('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è fileName –∏–ª–∏ fileType');
      return res.status(400).json({ error: "fileName –∏ fileType –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileExtension = getFileExtension(fileType);
    let finalFileName = fileName;

    // –ï—Å–ª–∏ —É —Ñ–∞–π–ª–∞ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –æ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    if (!finalFileName.includes('.') || !finalFileName.toLowerCase().endsWith(fileExtension.toLowerCase())) {
      // –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      const baseName = finalFileName.includes('.')
        ? finalFileName.substring(0, finalFileName.lastIndexOf('.'))
        : finalFileName;

      finalFileName = baseName + fileExtension;
      console.log('–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', finalFileName);
    }


    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let folder;
    let finalGroupId = groupId;

    if (context === 'news') {
      // –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
      folder = 'news/';
      console.log('–¢–∏–ø: –Ω–æ–≤–æ—Å—Ç—å');
    } else if (isPrivateChat === true) {
      folder = 'private-chats/';
      console.log('–¢–∏–ø: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (–ø–æ —Ñ–ª–∞–≥—É isPrivateChat)');
    } else if (groupId && groupId.startsWith('private_')) {
      folder = 'private-chats/';
      finalGroupId = groupId.replace('private_', '');
      console.log('–¢–∏–ø: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (legacy format)');
    } else if (groupId) {
      folder = 'group-chats/';
      console.log('–¢–∏–ø: –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç');
    } else {
      folder = 'misc/';
      console.log('–¢–∏–ø: –ø—Ä–æ—á–µ–µ (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)');
    }


    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π/–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)
    if (finalGroupId && folder !== 'news/') {
      const hasAccess = await checkChatAccess(req.user.uid, finalGroupId, folder === 'private-chats/');
      if (!hasAccess) {
        console.log('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', req.user.uid, '–Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É', finalGroupId);
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É" });
      }
      console.log('–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const uniqueId = uuidv4().substring(0, 8);
    const safeFileName = finalFileName.replace(/[^a-zA-Z0-9.-]/g, '_');
    const key = `${folder}${finalGroupId ? finalGroupId + '/' : ''}${timestamp}_${uniqueId}_${safeFileName}`;

    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞:', key);

    const signedUrlParams = {
      Bucket: BUCKET_NAME,
      Key: key,
      ContentType: String(fileType),
      ACL: "public-read"
    };

    const command = new PutObjectCommand(signedUrlParams);
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL...');

    const uploadUrl = await getSignedUrl(s3, command, { expiresIn: 300 });
    const fileUrl = `https://${BUCKET_NAME}.storage.yandexcloud.net/${key}`;

    console.log('‚úÖ Signed URL —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    console.log('üìÅ File URL:', fileUrl);

    res.json({
      success: true,
      uploadUrl,
      fileUrl,
      fileName: finalFileName,
      key,
      expiresIn: 300,
      expiresAt: Date.now() + 300000
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ upload URL:", err);

    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    if (err.name === 'CredentialsProviderError') {
      return res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ credentials"
      });
    }
    if (err.name === 'NoSuchBucket') {
      return res.status(500).json({
        success: false,
        error: `S3 bucket –Ω–µ –Ω–∞–π–¥–µ–Ω: ${BUCKET_NAME}`
      });
    }
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: " + err.message
      });
    }

    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
    });
  }
});

/// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
async function checkChatAccess(userId, chatId, isPrivate) {
    try {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:', { userId, chatId, isPrivate });

        if (isPrivate) {
            // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤: –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ chatId
            const parts = chatId.split('_');
            const hasAccess = parts.includes(userId);
            console.log('üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –¥–æ—Å—Ç—É–ø:', hasAccess);
            return hasAccess;
        } else {
            // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            const groupRef = db.ref(`chats/groups/${chatId}`);
            const groupSnap = await groupRef.once('value');
            const exists = groupSnap.exists();
            console.log('üë• –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–æ—Å—Ç—É–ø:', exists);
            return exists;
        }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É:', error);
      return false;
    }
}

 // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞ –ø–æ chatId
 async function isPrivateChatId(chatId) {
   try {
     // 1. –ï—Å–ª–∏ chatId —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
     if (chatId.includes('_')) {
       console.log("üîç ChatId —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç");

       // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
       const privateChatRef = db.ref(`chats/private/${chatId}`);
       const privateSnap = await privateChatRef.once('value');

       if (privateSnap.exists()) {
         console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å ID:", chatId);
         return true;
       }

       // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —Å '_' –≤ ID
       const groupChatRef = db.ref(`chats/groups/${chatId}`);
       const groupSnap = await groupChatRef.once('value');

       if (groupSnap.exists()) {
         console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å ID (—Å–æ–¥–µ—Ä–∂–∏—Ç '_'):", chatId);
         return false;
       }

       // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ —Ç–∞–º –Ω–∏ —Ç–∞–º - —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
       console.log("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ ID —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º");
       return true;
     }

     // 2. –ï—Å–ª–∏ –Ω–µ—Ç '_' - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
     const groupChatRef = db.ref(`chats/groups/${chatId}`);
     const groupSnap = await groupChatRef.once('value');

     if (groupSnap.exists()) {
       console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å ID:", chatId);
       return false;
     }

     // 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ - –æ—à–∏–±–∫–∞
     console.log("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö, –Ω–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö:", chatId);
     return false;

   } catch (error) {
     console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞:", error);
     // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É: –µ—Å–ª–∏ –µ—Å—Ç—å '_' - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
     return chatId.includes('_');
   }
 }


// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ ===
function getFileTypeText(messageType) {
  switch (messageType) {
    case 'image': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    case 'video': return '–í–∏–¥–µ–æ';
    case 'audio': return '–ê—É–¥–∏–æ';
    case 'file': return '–§–∞–π–ª';
    default: return '–§–∞–π–ª';
  }
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞ ===
async function removeInvalidToken(invalidToken) {
  try {
    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞");

    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};

    for (const [userId, user] of Object.entries(users)) {
      if (user.fcmToken === invalidToken) {
        await db.ref(`users/${userId}`).update({ fcmToken: null });
        console.log("‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
        return { success: true, userId };
      }
    }

    console.log("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    return { success: false, message: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" };

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", err);
    return { success: false, error: err.message };
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã ===
async function getGroupName(groupId) {
  try {
    const groupSnap = await db.ref(`groups/${groupId}/name`).once('value');
    const groupName = groupSnap.val() || `–ì—Ä—É–ø–ø–∞ ${groupId}`;
    console.log("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", groupName);
    return groupName;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:", error);
    return `–ì—Ä—É–ø–ø–∞ ${groupId}`;
  }
}

// === –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ ID –≥—Ä—É–ø–ø—ã ===
async function findParentsByGroupId(groupId) {
  try {
    console.log("üîç –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã:", groupId);

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã
    const groupSnap = await db.ref(`groups/${groupId}/children`).once('value');
    const childrenInGroup = groupSnap.val() || {};
    const childIds = Object.keys(childrenInGroup);

    console.log("üë∂ –î–µ—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ:", childIds.length);

    if (childIds.length === 0) return [];

    // 2. –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π —ç—Ç–∏—Ö –¥–µ—Ç–µ–π
    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};
    const parents = [];
    const foundParentIds = new Set();

    for (const [userId, user] of Object.entries(users)) {
      if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children) {

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userDataSnap = await db.ref(`users/${userId}`).once('value');
        const userData = userDataSnap.val() || {};

        for (const childId of childIds) {
          const childNameInGroup = childrenInGroup[childId];

          for (const [parentChildId, parentChildData] of Object.entries(user.children)) {
            if (parentChildData && parentChildData.fullName === childNameInGroup) {

              if (!foundParentIds.has(userId)) {
                parents.push({
                  userId: userId,
                  name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
                  fcmToken: user.fcmToken || null,
                  childId: parentChildId,
                  childName: parentChildData.fullName,
                  childBirthDate: parentChildData.birthDate || "",
                  childGroup: groupId
                });
                foundParentIds.add(userId);
                console.log(`   ‚úÖ –†–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.name} -> ${parentChildData.fullName}`);
                break;
              }
            }
          }
        }
      }
    }

    console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: ${parents.length}`);
    return parents;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:", error);
    return [];
  }
}


// === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö ===

async function sendChatNotification({
  chatId,
  senderId,
  senderName,
  message,
  messageType,
  fileUrl,
  fileName,
  isPrivate
}) {
  try {
    console.log("üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞:", chatId);

    let recipients = [];
    let chatTitle = "";

    if (isPrivate) {
      // ‚úÖ –ü–†–ò–í–ê–¢–ù–´–ô –ß–ê–¢: –Ω–∞—Ö–æ–¥–∏–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      const parts = chatId.split('_');
      const otherUserId = parts.find(id => id !== senderId);

      if (otherUserId) {
        const userSnap = await db.ref(`users/${otherUserId}`).once('value');
        const user = userSnap.val();
        if (user && user.fcmToken) {
          recipients.push({
            userId: otherUserId,
            name: user.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            fcmToken: user.fcmToken
          });
          chatTitle = user.name || "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç";
        }
      }
    } else {
      // ‚úÖ –ì–†–£–ü–ü–û–í–û–ô –ß–ê–¢: –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
      const groupSnap = await db.ref(`groups/${chatId}`).once('value');
      const group = groupSnap.val();

      if (group) {
        chatTitle = group.name || "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç";

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π
        if (group.teachers) {
          for (const [teacherId, teacherName] of Object.entries(group.teachers)) {
            if (teacherId !== senderId) {
              const teacherSnap = await db.ref(`users/${teacherId}`).once('value');
              const teacher = teacherSnap.val();
              if (teacher && teacher.fcmToken) {
                recipients.push({
                  userId: teacherId,
                  name: teacherName,
                  fcmToken: teacher.fcmToken
                });
              }
            }
          }
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–π
        if (group.children) {
          const usersSnap = await db.ref('users').once('value');
          const users = usersSnap.val() || {};

          for (const [userId, user] of Object.entries(users)) {
            if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children && userId !== senderId) {
              for (const [childId, child] of Object.entries(user.children)) {
                if (group.children[childId]) {
                  if (user.fcmToken) {
                    recipients.push({
                      userId: userId,
                      name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
                      fcmToken: user.fcmToken
                    });
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

    console.log(`üì® –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${recipients.length}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    let successful = 0;
    for (const recipient of recipients) {
      try {
        const messagePayload = {
          token: recipient.fcmToken,
          notification: {
            title: `üí¨ ${isPrivate ? senderName : chatTitle}`,
            body: messageType === 'text' ? message : `üìé ${getFileTypeText(messageType)}`
          },
          data: {
            type: "chat",
            chatId: chatId,
            senderId: senderId,
            senderName: senderName,
            message: message,
            isGroup: String(!isPrivate),
            timestamp: String(Date.now())
          }
        };

        await admin.messaging().send(messagePayload);
        successful++;
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${recipient.name}`);
      } catch (tokenError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${recipient.name}:`, tokenError.message);

        // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        if (tokenError.code === "messaging/registration-token-not-registered") {
          await removeInvalidToken(recipient.fcmToken);
        }
      }
    }

    console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${successful}/${recipients.length}`);
    return { successful, total: recipients.length };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendChatNotification:", error);
    return { successful: 0, total: 0 };
  }
}

/// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º ===
app.post("/send-message", verifyToken, async (req, res) => {
   try {
     const { chatId, message, messageType = "text", fileUrl, fileName } = req.body;
     const senderId = req.user.uid;
     console.log("üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", { senderId, chatId, messageType });


     if (!chatId || !message) {
       return res.status(400).json({ error: "chatId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
     }

     // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     const senderSnap = await db.ref(`users/${senderId}`).once('value');
     const sender = senderSnap.val();
     const senderName = sender?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

     // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
     const messageId = uuidv4();
     const messageData = {
       id: messageId,
       senderId,
       senderName,
       text: message,
       timestamp: Date.now(),
       fileUrl: fileUrl || null,
       fileType: messageType,
       fileName: fileName || null
     };

     // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
     const isPrivateChat = await isPrivateChatId(chatId);
     console.log("üîç –¢–∏–ø —á–∞—Ç–∞:", isPrivateChat ? "PRIVATE" : "GROUP");

     let chatRef;
     if (isPrivateChat) {
       // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
       chatRef = db.ref(`chats/private/${chatId}/messages/${messageId}`);
       console.log("üìÅ –ü—É—Ç—å: chats/private/");
     } else {
       chatRef = db.ref(`chats/groups/${chatId}/messages/${messageId}`);
       console.log("üìÅ –ü—É—Ç—å: chats/groups/");
     }

     await chatRef.set(messageData);
     console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firebase");

     // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     await sendChatNotification({
       chatId,
       senderId,
       senderName,
       message,
       messageType,
       fileUrl,
       fileName,
       isPrivate: isPrivateChat
     });

     console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");

     res.json({
       success: true,
       messageId,
       timestamp: messageData.timestamp
     });

   } catch (err) {
     console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
     res.status(500).json({ error: err.message });
   }
 });

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.post("/save-fcm-token", verifyToken, async (req, res) => {
  try {
    const { fcmToken } = req.body;
    const userId = req.user.uid;

    if (!fcmToken) {
      return res.status(400).json({ error: "fcmToken –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

    await db.ref(`users/${userId}`).update({
      fcmToken,
      fcmTokenUpdated: Date.now()
    });

    console.log("‚úÖ FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
    res.json({ success: true });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:", err);
    res.status(500).json({ error: err.message });
  }
});


// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
function formatEventNotification(title, time, place, groupName) {
  let notification = `üìÖ ${title}`;

  if (time) {
    notification += ` –≤ ${time}`;
  }

  if (place) {
    notification += ` (${place})`;
  }

  if (groupName) {
    notification += ` ‚Ä¢ ${groupName}`;
  }

  return notification;
}


 /// === –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏–∏ ===
async function sendEventNotifications({
    parents, // ‚úÖ –ü–ï–†–ï–î–ê–ï–ú –í–°–ï–• –†–û–î–ò–¢–ï–õ–ï–ô –° –ò–• –î–ê–ù–ù–´–ú–ò
    groupId,
    groupName,
    eventId,
    title,
    time,
    place,
    comments,
    date,
    notificationBody
  }) {
    try {
      const parentsWithTokens = parents.filter(parent => parent.fcmToken && parent.fcmToken.trim() !== "");
      console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${parentsWithTokens.length} —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏`);

      let successful = 0;
      let failed = 0;
      const errors = [];

      for (const parent of parentsWithTokens) {
        try {
          console.log(`‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${parent.name}`);

          // ‚úÖ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ö–ê–ñ–î–û–ì–û –†–û–î–ò–¢–ï–õ–Ø
          const messagePayload = {
            token: parent.fcmToken,
            notification: {
              title: "üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
              body: notificationBody
            },
            data: {
              type: "new_event",
              autoOpenFragment: "events",
              groupId: String(groupId || ""),
              groupName: String(groupName || ""),
              eventId: String(eventId || ""),
              title: String(title || ""),
              time: String(time || ""),
              place: String(place || ""),
              comments: String(comments || ""),
              date: String(date || ""),
              timestamp: String(Date.now()),
              childId: parent.childId || "", //
              userId: parent.userId || "",
              childFullName: parent.childName || "",
              childGroup: String(groupName || ""),
              childBirthDate: parent.childBirthDate || ""
            }
          };

          const response = await admin.messaging().send(messagePayload);
          successful++;
          console.log("‚úÖ –ü—É—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è", parent.name);

        } catch (tokenError) {
          failed++;
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è", parent.name, tokenError.message);

          errors.push({
            parent: parent.name,
            error: tokenError.message,
            code: tokenError.code
          });

          // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
          if (tokenError.code === "messaging/registration-token-not-registered") {
            const removeResult = await removeInvalidToken(parent.fcmToken);
            console.log(`üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:`, removeResult);
          }
        }
      }

      console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: –£—Å–ø–µ—à–Ω–æ ${successful}, –ù–µ—É–¥–∞—á–Ω–æ ${failed}`);
      return { successful, failed, totalTokens: parentsWithTokens.length, errors };

    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendEventNotifications:", err);
      return { successful: 0, failed: parents.length, errors: [err.message] };
    }
  }

 // === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ ===
app.post("/send-event-notification", verifyToken, async (req, res) => {
   console.log("üü¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏");
   console.log("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", JSON.stringify(req.body, null, 2));

   try {
     const {
       groupId,
       groupName,
       eventId,
       title,
       time,
       place,
       comments,
       date
     } = req.body;

     // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
     if (!groupId || !eventId || !title) {
       console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
       return res.status(400).json({
         error: "groupId, eventId, title –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
       });
     }
     console.log("üîî –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:", { groupId, title, time, date });

     // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
     const actualGroupName = await getGroupName(groupId);
     console.log("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ", actualGroupName);

     // 1. –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
     const parents = await findParentsByGroupId(groupId);

     if (parents.length === 0) {
       console.log("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:", groupId);
       return res.json({
         success: true,
         message: "–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
       });
     }

     console.log("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏:", parents.length);
     console.log("üìã –°–ø–∏—Å–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:");
     parents.forEach((parent, index) => {
       console.log(`   ${index + 1}. ${parent.name} (—Ä–µ–±–µ–Ω–æ–∫: ${parent.childName})`);
     });

     const parentsWithTokens = parents.filter(parent => parent.fcmToken && parent.fcmToken.trim() !== "");
     console.log(`üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${parentsWithTokens.length} –∏–∑ ${parents.length}`);

     // 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     const notificationBody = formatEventNotification(title, time, place, actualGroupName);
     console.log("üìù –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", notificationBody);

     // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     const sendResults = await sendEventNotifications({
       parents: parents,
       groupId,
       groupName: actualGroupName,
       eventId,
       title,
       time,
       place,
       comments,
       date,
       notificationBody
     });

     console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ${sendResults.successful} —Ä–æ–¥–∏—Ç–µ–ª–µ–π`);

     res.json({
       success: true,
       message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${sendResults.successful} —Ä–æ–¥–∏—Ç–µ–ª—è–º`,
       recipients: sendResults.successful,
       totalParents: parents.length,
       parentsWithTokens: sendResults.successful,
       statistics: sendResults
     });

   } catch (err) {
     console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏:", err);
     res.status(500).json({
       error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
     });
   }
 });

 // === Health Check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
 app.get("/health", (req, res) => {
   console.log("‚úÖ Health check –≤—ã–ø–æ–ª–Ω–µ–Ω");
   res.json({
     status: "OK",
     timestamp: new Date().toISOString(),
     service: "Firebase Admin Server",
     version: "1.0.0",
     firebase: firebaseInitialized ? "connected" : "disconnected",
     environment: process.env.NODE_ENV || "development"
   });
     console.log("‚úÖ Health check –≤—ã–ø–æ–ª–Ω–µ–Ω");
     res.json(healthStatus);
 });


// === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ ===
app.get("/info", (req, res) => {
  console.log("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ");
  res.json({
    service: "Firebase Admin Notification Server",
    version: "1.0.0",
    endpoints: {
      "POST /send-event-notification": "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö",
      "POST /send-message": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç",
      "POST /generate-upload-url": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤",
      "GET /news": "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π",
      "POST /news": "–°–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π",
      "GET /health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞",
      "GET /info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"
    },
    features: [
      "FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö",
      "–ß–∞—Ç —Å —Ñ–∞–π–ª–∞–º–∏",
      "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ S3",
      "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"
    ]
  });
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ ===
app.use((req, res) => {
  console.log(`‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.path}`);
  res.status(404).json({
    error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
    path: req.path,
    method: req.method
  });
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ ===
app.use((err, req, res, next) => {
  console.error("üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
  res.status(500).json({
    error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`üöÄ Server started on port ${PORT}`);
  console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîß Firebase: ${firebaseInitialized ? '‚úÖ' : '‚ùå'}`);
  console.log(`üåê S3 Bucket: ${BUCKET_NAME}`);
  console.log(`‚è∞ Started at: ${new Date().toISOString()}`);
});


// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.get("/", (req, res) => res.send("Server is running"));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
