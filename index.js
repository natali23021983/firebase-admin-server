require('dotenv').config();
const express = require('express');
const cors = require("cors");
const admin = require('firebase-admin');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const { S3Client, PutObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } = require("@aws-sdk/client-s3");
const bodyParser = require("body-parser");
const path = require('path');
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");


const app = express();
app.use(cors());
app.use(bodyParser.json());

// Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å
const upload = multer({ storage: multer.memoryStorage() });

// === Firebase Admin SDK ===
try{
    const base64 = process.env.FIREBASE_CONFIG;
    if (!base64) throw new Error("FIREBASE_CONFIG –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env");
    const serviceAccount = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));

    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      databaseURL: process.env.FIREBASE_DB_URL
    });
    console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

} catch (err) {
  console.error("üî• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", err);
}


const db = admin.database();
const auth = admin.auth();

// === –Ø–Ω–¥–µ–∫—Å S3 ===
const s3 = new S3Client({
  region: process.env.YC_S3_REGION || "ru-central1",
  endpoint: process.env.YC_S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY,
    secretAccessKey: process.env.YC_SECRET_KEY,
  },
});
const BUCKET_NAME = process.env.YC_S3_BUCKET;
console.log("BUCKET_NAME:", process.env.YC_S3_BUCKET);



// === Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase-—Ç–æ–∫–µ–Ω–∞ ===
async function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization || "";
  const token = authHeader.startsWith("Bearer ") ? authHeader.split("Bearer ")[1] : null;

  if (!token) {
    console.warn("üö´ verifyToken: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
    return res.status(401).send("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞");
  }

  try {
    const decoded = await admin.auth().verifyIdToken(token);
    req.user = decoded;
    console.log("‚úÖ verifyToken: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, uid:", decoded.uid);
    next();
  } catch (err) {
    console.error("‚ùå verifyToken: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫", err);
    res.status(403).send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
  }
}


// === –£—Ç–∏–ª–∏—Ç—ã S3-–∑–∞–≥—Ä—É–∑–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è ===
async function uploadToS3(buffer, fileName, contentType) {
  await s3.send(new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: fileName,
    Body: buffer,
    ContentType: contentType,
    ACL: 'public-read'
  }));
  return `https://${BUCKET_NAME}.storage.yandexcloud.net/${fileName}`;
}

async function deleteFromS3(urls) {
  const keys = urls.map(url => {
    const parts = url.split(`${BUCKET_NAME}/`);
    return parts[1] ? { Key: parts[1] } : null;
  }).filter(Boolean);

  if (keys.length === 0) return;
  await s3.send(new DeleteObjectsCommand({
    Bucket: BUCKET_NAME,
    Delete: { Objects: keys }
  }));
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ä–µ–±—ë–Ω–∫–∞ ===
app.post('/deleteUserByName', async (req, res) => {
  const fullName = req.body.fullName?.trim().toLowerCase();
  if (!fullName) return res.status(400).send("fullName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  try {
    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};

    for (const [userId, user] of Object.entries(users)) {
      const name = user.name?.trim().toLowerCase();
      const role = user.role?.trim().toLowerCase();

      // –†–æ–¥–∏—Ç–µ–ª—å
      if (name === fullName && role === '—Ä–æ–¥–∏—Ç–µ–ª—å') {
        if (user.children) {
          for (const child of Object.values(user.children)) {
            const groupId = child.group;
            if (groupId) {
              const gcRef = db.ref(`groups/${groupId}/children`);
              const gcSnap = await gcRef.once('value');
              const gc = gcSnap.val() || {};
              for (const [gcId, full] of Object.entries(gc)) {
                if (full === child.fullName) {
                  await gcRef.child(gcId).remove();
                  break;
                }
              }
            }
          }
        }
        await db.ref(`users/${userId}`).remove();
        await auth.deleteUser(userId);
        return res.send("–†–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –¥–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã.");
      }

      // –ü–µ–¥–∞–≥–æ–≥
      if (name === fullName && role === '–ø–µ–¥–∞–≥–æ–≥') {
        const groupsSnap = await db.ref('groups').once('value');
        const groups = groupsSnap.val() || {};
        for (const [groupId, group] of Object.entries(groups)) {
          if (group.teachers?.[userId]) {
            await db.ref(`groups/${groupId}/teachers/${userId}`).remove();
          }
        }
        await db.ref(`users/${userId}`).remove();
        await auth.deleteUser(userId);
        return res.send("–ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª—ë–Ω.");
      }

      // –†–µ–±—ë–Ω–æ–∫
      if (user.children) {
        for (const [childId, child] of Object.entries(user.children)) {
          if (child.fullName?.trim().toLowerCase() === fullName) {
            const groupId = child.group;
            if (groupId) {
              const gcRef = db.ref(`groups/${groupId}/children`);
              const gcSnap = await gcRef.once('value');
              const gc = gcSnap.val() || {};
              for (const [gcId, full] of Object.entries(gc)) {
                if (full === child.fullName) {
                  await gcRef.child(gcId).remove();
                  break;
                }
              }
            }
            await db.ref(`users/${userId}/children/${childId}`).remove();
            return res.send("–†–µ–±—ë–Ω–æ–∫ —É–¥–∞–ª—ë–Ω.");
          }
        }
      }
    }

    res.status(404).send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ deleteUserByName:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.");
  }
});

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email ===
app.post("/update-user", async (req, res) => {
  try {
    const { fullName, newEmail } = req.body;
    if (!fullName || !newEmail) return res.status(400).json({ error: "fullName –∏ newEmail –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

    const snap = await db.ref("users").orderByChild("name").equalTo(fullName).once("value");
    if (!snap.exists()) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const users = snap.val();
    const keys = Object.keys(users);
    if (keys.length > 1) return res.status(400).json({ error: "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º" });

    const userKey = keys[0];
    const user = users[userKey];
    const userId = user.userId;
    if (!userId) return res.status(400).json({ error: "userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ" });

    await auth.updateUser(userId, { email: newEmail });
    await db.ref(`users/${userKey}`).update({ email: newEmail });

    res.json({ message: "Email –æ–±–Ω–æ–≤–ª–µ–Ω", userId, updatedUser: { name: fullName, email: newEmail } });
  } catch (err) {
    if (err.code === 'auth/email-already-exists') {
      return res.status(400).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
    }
    console.error("–û—à–∏–±–∫–∞ update-user:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message });
  }
});

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏) ===

app.post("/news", verifyToken, async (req, res) => {
  try {
    const { title, description, groupId, authorId, mediaUrls } = req.body;

    if (!title || !description || !groupId || !authorId || !Array.isArray(mediaUrls)) {
      return res.status(400).json({ error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: title, description, groupId, authorId, mediaUrls[]" });
    }

    const images = mediaUrls.filter(url => !url.endsWith(".mp4"));
    const videoUrl = mediaUrls.find(url => url.endsWith(".mp4"));

    const newsId = uuidv4();
    const timestamp = Date.now();

    const newsData = {
      title,
      description,
      authorId,
      timestamp,
      imageUrls: images,
    };

    if (videoUrl) {
      newsData.videoUrl = videoUrl;
    }

    await db.ref(`news/${groupId}/${newsId}`).set(newsData);

    res.json({ success: true, newsId });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ POST /news:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏" });
  }
});


app.post("/news", verifyToken, async (req, res) => {
  try {
    const { newsId, groupId, title, description, imagesToKeep = [], video } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !title || !description) {
      return res.status(400).json({ error: "groupId, title –∏ description –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    if (newsId) {
      // === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
      const ref = db.ref(`news/${groupId}/${newsId}`);
      const snap = await ref.once("value");
      const oldNews = snap.val();
      if (!oldNews) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      if (oldNews.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

      // –£–¥–∞–ª—è–µ–º –∏–∑ S3 —Å—Ç–∞—Ä—ã–µ –º–µ–¥–∏–∞
      const oldUrls = [...(oldNews.imageUrls || []), oldNews.videoUrl].filter(Boolean);
      const keepSet = new Set(imagesToKeep.concat(video).filter(Boolean));
      const toDelete = oldUrls.filter(url => !keepSet.has(url));
      await deleteFromS3(toDelete);

      // –û–±–Ω–æ–≤–ª—è–µ–º
      const newData = {
        title,
        description,
        imageUrls: imagesToKeep,
        authorId,
        timestamp: Date.now(),
      };
      if (video) newData.videoUrl = video;

      await ref.update(newData);
      return res.json({ success: true, updated: true });
    } else {
      // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ===

      const ref = db.ref(`news/${groupId}/${id}`);

      const media = req.body.mediaUrls || imagesToKeep || [];  // ‚Üê –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
      const imageUrls = media.filter(u => !u.includes(".mp4"));
      const videoUrl = media.find(u => u.includes(".mp4"));

      const data = {
        title,
        description,
        imageUrls,
        timestamp: Date.now(),
        authorId
      };
      if (videoUrl) data.videoUrl = videoUrl;

      await ref.set(data);
      return res.json({ success: true, id });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ POST /news:", err);
    res.status(500).json({ error: err.message });
  }
});



// === –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
app.post("/deleteNews", verifyToken, async (req, res) => {
  try {
    const { groupId, newsId } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !newsId) {
      return res.status(400).json({ error: "groupId –∏ newsId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const snap = await db.ref(`news/${groupId}/${newsId}`).once('value');
    const data = snap.val();
    if (!data) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    if (data.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

    const urls = [...(data.imageUrls || []), data.videoUrl].filter(Boolean);
    await deleteFromS3(urls);
    await db.ref(`news/${groupId}/${newsId}`).remove();

    res.json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ deleteNews:", err);
    res.status(500).json({ error: err.message });
  }
});


// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3 ===
app.post('/generate-upload-url', verifyToken, async (req, res) => {
  console.log('=== /generate-upload-url: –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  try {
    const { fileName, fileType, groupId } = req.body;
    console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);

    if (!fileName || !fileType || !groupId) {
      console.log('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return res.status(400).json({ error: "fileName, fileType –∏ groupId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const key = `news/${groupId}/${Date.now()}_${fileName}`;
    console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞:', key);

    const contentType = String(fileType); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∫–æ–π

    const signedUrlParams = {
      Bucket: BUCKET_NAME,
      Key: key,
      ContentType: contentType
    };

    console.log('ContentType, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω:', contentType);

    const command = new PutObjectCommand(signedUrlParams);

    console.log('–í—ã–∑–æ–≤ getSignedUrl...');

    const uploadUrl = await getSignedUrl(s3, command, { expiresIn: 300 });

    console.log('Signed URL –ø–æ–ª—É—á–µ–Ω:', uploadUrl);

    const fileUrl = `https://${BUCKET_NAME}.storage.yandexcloud.net/${key}`;

    res.json({ uploadUrl, fileUrl });
    console.log('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ upload URL:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.get("/", (req, res) => res.send("Server is running"));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
