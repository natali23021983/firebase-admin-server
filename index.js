const express = require('express');
const admin = require('firebase-admin');
const app = express();
app.use(express.json());

const serviceAccount = require('./teremok-1a3ff-firebase-adminsdk-fbsvc-3d34a609b1.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://teremok-1a3ff-firebase-adminsdk-fbsvc-3d34a609b1"
});

const db = admin.database();
const auth = admin.auth();

// üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
app.post('/deleteUserByName', async (req, res) => {
  const fullName = req.body.fullName;

  try {
    // –ù–∞–π–¥—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersSnapshot = await db.ref('users').once('value');
    const users = usersSnapshot.val();

    let found = false;

    for (const userId in users) {
      const user = users[userId];

      // === –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è ===
      if (user.name === fullName && user.role === '—Ä–æ–¥–∏—Ç–µ–ª—å') {
        found = true;

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –µ–≥–æ –¥–µ—Ç–µ–π
        if (user.children) {
          for (const childId in user.children) {
            const child = user.children[childId];
            const groupId = child.group;

            // –£–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã
            if (groupId) {
              await db.ref(`groups/${groupId}/children/${childId}`).remove();
            }
          }
        }

        // –£–¥–∞–ª–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è
        await db.ref(`users/${userId}`).remove();
        await auth.deleteUser(userId); // –∏–∑ Firebase Auth
        return res.send("–†–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –¥–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã.");
      }

      // === –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ–¥–∞–≥–æ–≥–∞ ===
      if (user.name === fullName && user.role === '–ø–µ–¥–∞–≥–æ–≥') {
        found = true;

        // –£–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø
        const groupsSnapshot = await db.ref('groups').once('value');
        const groups = groupsSnapshot.val();
        for (const groupId in groups) {
          if (groups[groupId].teachers && groups[groupId].teachers[userId]) {
            await db.ref(`groups/${groupId}/teachers/${userId}`).remove();
          }
        }

        await db.ref(`users/${userId}`).remove();
        await auth.deleteUser(userId);
        return res.send("–ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª—ë–Ω.");
      }

      // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–µ–π —É —Ä–æ–¥–∏—Ç–µ–ª—è ===
      if (user.children) {
        for (const childId in user.children) {
          const child = user.children[childId];
          if (child.fullName === fullName) {
            found = true;

            // –£–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
            }

            // –£–¥–∞–ª–∏—Ç—å —É —Ä–æ–¥–∏—Ç–µ–ª—è
            await db.ref(`users/${userId}/children/${childId}`).remove();

            return res.send("–†–µ–±—ë–Ω–æ–∫ —É–¥–∞–ª—ë–Ω.");
          }
        }
      }
    }

    if (!found) {
      return res.status(404).send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

  } catch (error) {
    console.error(error);
    return res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.");
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

