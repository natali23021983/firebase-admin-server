// üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í - –î–û–ë–ê–í–¨–¢–ï –ü–ï–†–í–´–ú–ò –°–¢–†–û–ß–ö–ê–ú–ò
require('dotenv').config();

const net = require('net');
const PORT = process.env.PORT || 10000;

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...');

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const tester = net.createServer();

tester.once('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù –î–£–ë–õ–ò–ö–ê–¢! –ó–∞–≤–µ—Ä—à–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
    console.log('üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å');

    // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è
    setTimeout(() => {
      console.log('üî¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å...');
      process.exit(0);
    }, 3000);
    return;
  }
  console.error('‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞:', err.message);
  process.exit(1);
});

tester.once('listening', () => {
  // –ü–æ—Ä—Ç—É —Å–≤–æ–±–æ–¥–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫
  tester.close(() => {
    console.log('üü¢ –ü–æ—Ä—Ç—É —Å–≤–æ–±–æ–¥–µ–Ω! –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä...');
    startMainServer();
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
tester.listen(PORT, '0.0.0.0');

function startMainServer() {

// üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø RENDER.COM
if (process.env.RENDER) {
  console.log('üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ä–µ–¥–∞ Render.com - –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
}

// üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
process.on('uncaughtException', (error) => {
  console.error('üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  console.error('üî• –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üî• –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô –ü–†–û–ú–ò–°:', reason);
  console.error('üî• –°—Ç–µ–∫:', reason?.stack);
});

process.on('SIGTERM', () => {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGINT (Ctrl+C), –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

// üî• –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–£–õ–ê –ü–û–¢–û–ö–û–í NODE.JS
const os = require('os');
const THREAD_POOL_SIZE = process.env.UV_THREADPOOL_SIZE || 128;
process.env.UV_THREADPOOL_SIZE = THREAD_POOL_SIZE;

console.log(`üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞:`);
console.log(`   CPU cores: ${os.cpus().length}`);
console.log(`   Thread pool: ${THREAD_POOL_SIZE}`);
console.log(`   Memory: ${Math.round(os.totalmem() / 1024 / 1024 / 1024)}GB`);

// üî• –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô
const https = require('https');
const http = require('http');

https.globalAgent.maxSockets = Infinity;
http.globalAgent.maxSockets = Infinity;
https.globalAgent.maxFreeSockets = 256;
http.globalAgent.maxFreeSockets = 256;

// ==================== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô OPTIMIZEDLRUCACHE ====================
class OptimizedLRUCache {
  constructor(maxSize = 1000, maxMemoryMB = 500) {
    this.maxSize = maxSize;
    this.maxMemoryBytes = maxMemoryMB * 1024 * 1024;
    this.cache = new Map();
    this.stats = {
      hits: 0,
      misses: 0,
      evictions: 0,
      sets: 0
    };

    // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    this.cleanupInterval = setInterval(() => {
      try {
        this.cleanup();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ cleanup:', error);
      }
    }, 60000);

    // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.aggressiveCleanupInterval = setInterval(() => {
      this.aggressiveCleanup();
    }, 300000);

    console.log(`‚úÖ –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: maxSize=${maxSize}, maxMemory=${maxMemoryMB}MB`);
  }

  get(key) {
    if (!this.cache.has(key)) {
      this.stats.misses++;
      if (global.performanceMetrics) {
        global.performanceMetrics.cacheMisses++;
      }
      return null;
    }

    const item = this.cache.get(key);
    const now = Date.now();
    if (now - item.timestamp > item.ttl) {
      this.cache.delete(key);
      this.stats.misses++;
      if (global.performanceMetrics) {
        global.performanceMetrics.cacheMisses++;
      }
      return null;
    }

    this.cache.delete(key);
    this.cache.set(key, item);

    this.stats.hits++;
    if (global.performanceMetrics) {
      global.performanceMetrics.cacheHits++;
    }

    return item.data;
  }

  set(key, value, ttl = 300000, priority = 'medium') {
    try {
      if (this.cache.size >= this.maxSize) {
        this.evictByPriority();
      }

      const item = {
        data: value,
        timestamp: Date.now(),
        ttl: ttl,
        priority: priority
      };

      if (this.cache.has(key)) {
        this.cache.delete(key);
      }

      this.cache.set(key, item);
      this.stats.sets++;

      if (this.cache.size > this.maxSize * 0.9) {
        setTimeout(() => this.cleanup(), 1000);
      }

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à:', error);
      return false;
    }
  }

  evictByPriority() {
    const now = Date.now();
    const priorities = ['low', 'medium', 'high'];

    for (let [key, value] of this.cache.entries()) {
      if (now - value.timestamp > value.ttl) {
        this.cache.delete(key);
        this.stats.evictions++;
        return;
      }
    }

    for (const priority of priorities) {
      for (let [key, value] of this.cache.entries()) {
        if (value.priority === priority) {
          this.cache.delete(key);
          this.stats.evictions++;
          return;
        }
      }
    }

    const firstKey = this.cache.keys().next().value;
    if (firstKey) {
      this.cache.delete(firstKey);
      this.stats.evictions++;
    }
  }

  cleanup() {
    try {
      const now = Date.now();
      let cleaned = 0;
      const keysToDelete = [];

      for (let [key, value] of this.cache.entries()) {
        if (now - value.timestamp > value.ttl) {
          keysToDelete.push(key);
          cleaned++;
          if (cleaned >= 50) break;
        }
      }

      keysToDelete.forEach(key => this.cache.delete(key));

      if (cleaned > 0) {
        console.log(`üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
      }

      return cleaned;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞:', error);
      return 0;
    }
  }

  // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –ù–û–í–´–ô –ú–ï–¢–û–î - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  aggressiveCleanup() {
    try {
      const now = Date.now();
      let cleaned = 0;
      const keysToDelete = [];

      for (let [key, value] of this.cache.entries()) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ –í–ù–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –æ—Ç TTL
        if (now - value.timestamp > 3600000) {
          keysToDelete.push(key);
          cleaned++;
        }
      }

      keysToDelete.forEach(key => this.cache.delete(key));

      if (cleaned > 0) {
        console.log(`üßπ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (global.gc && this.cache.size > this.maxSize * 0.7) {
        global.gc();
      }

      return cleaned;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', error);
      return 0;
    }
  }

  getStats() {
    const total = this.stats.hits + this.stats.misses;
    return {
      size: this.cache.size,
      hits: this.stats.hits,
      misses: this.stats.misses,
      sets: this.stats.sets,
      evictions: this.stats.evictions,
      hitRate: total > 0 ? ((this.stats.hits / total) * 100).toFixed(2) + '%' : '0%',
      memoryUsage: this.getMemoryUsage() + 'MB'
    };
  }

  getMemoryUsage() {
    try {
      let size = 0;
      for (let [key, value] of this.cache.entries()) {
        size += key.length;
        try {
          size += JSON.stringify(value.data).length;
        } catch (e) {
          size += 100;
        }
      }
      return Math.round(size / 1024 / 1024);
    } catch (error) {
      return 0;
    }
  }

  emergencyCleanup() {
    try {
      const currentSize = this.cache.size;
      const targetSize = Math.floor(this.maxSize * 0.3);

      if (currentSize <= targetSize) return 0;

      const keysToDelete = [];
      const now = Date.now();

      for (let [key, value] of this.cache.entries()) {
        if (now - value.timestamp > value.ttl) {
          keysToDelete.push(key);
          if (keysToDelete.length >= currentSize - targetSize) break;
        }
      }

      if (keysToDelete.length < currentSize - targetSize) {
        for (let [key, value] of this.cache.entries()) {
          if (value.priority === 'low' && !keysToDelete.includes(key)) {
            keysToDelete.push(key);
            if (keysToDelete.length >= currentSize - targetSize) break;
          }
        }
      }

      if (keysToDelete.length < currentSize - targetSize) {
        for (let [key, value] of this.cache.entries()) {
          if (value.priority === 'medium' && !keysToDelete.includes(key)) {
            keysToDelete.push(key);
            if (keysToDelete.length >= currentSize - targetSize) break;
          }
        }
      }

      keysToDelete.forEach(key => this.cache.delete(key));
      console.log(`üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ ${keysToDelete.length} –∑–∞–ø–∏—Å–µ–π`);

      return keysToDelete.length;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
      return 0;
    }
  }

  // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î destroy
  destroy() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }
    if (this.aggressiveCleanupInterval) {
      clearInterval(this.aggressiveCleanupInterval);
      this.aggressiveCleanupInterval = null;
    }
  }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–≠–®–ê –ò –ú–ï–¢–†–ò–ö ====================
if (!global.performanceMetrics) {
  global.performanceMetrics = {
    requests: 0,
    errors: 0,
    slowRequests: 0,
    cacheHits: 0,
    cacheMisses: 0,
    startTime: Date.now()
  };
}

console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –∫—ç—à–∞');
const quickCache = new OptimizedLRUCache(500, 250);
const healthCache = new OptimizedLRUCache(50, 10);

global.quickCache = quickCache;
global.healthCache = healthCache;

console.log('üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', quickCache.getStats());

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ê–ô–ú–ê–£–¢–û–í –ò –ü–û–í–¢–û–†–û–í ====================
const FIREBASE_TIMEOUT = 30000;
const S3_TIMEOUT = 60000;
const RETRY_ATTEMPTS = 3;
const RETRY_BASE_DELAY = 1000;

// üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 6: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const connectionCounters = {
  firebase: 0,
  s3: 0,
  http: 0
};

// üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 7: –û–ë–ù–û–í–õ–ï–ù–ù–´–ô withRetry –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const withRetry = async (operation, operationName = 'Operation', timeoutMs = FIREBASE_TIMEOUT, maxRetries = RETRY_ATTEMPTS) => {
  const counterType = operationName.includes('Firebase') ? 'firebase' :
                     operationName.includes('S3') ? 's3' : 'http';
  connectionCounters[counterType]++;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const result = await Promise.race([
        operation(),
        new Promise((_, reject) =>
          setTimeout(() => {
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationName} –ø–æ—Å–ª–µ ${timeoutMs}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`));
          }, timeoutMs)
        )
      ]);
      connectionCounters[counterType]--;
      return result;
    } catch (error) {
      if (attempt === maxRetries) {
        connectionCounters[counterType]--;
        throw error;
      }

      const delay = RETRY_BASE_DELAY * Math.pow(2, attempt - 1);
      console.warn(`üîÑ –ü–æ–≤—Ç–æ—Ä ${attempt}/${maxRetries} –¥–ª—è ${operationName} —á–µ—Ä–µ–∑ ${delay}–º—Å:`, error.message);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};

const withStrictTimeout = (promise, timeoutMs, operationName = 'Operation') => {
  return withRetry(() => promise, operationName, timeoutMs, 1);
};

// ==================== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ú–Ø–¢–ò ====================
const MEMORY_LIMIT = 800 * 1024 * 1024;
let emergencyMode = false;

// üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 8: –£–ü–†–ê–í–õ–Ø–ï–ú–´–ï –ò–ù–¢–ï–†–í–ê–õ–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
let memoryMonitorInterval = null;
let cacheStatsInterval = null;
let memoryLeakMonitorInterval = null;

function startMonitoringIntervals() {
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  stopMonitoringIntervals();

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
  memoryMonitorInterval = setInterval(() => {
    const memory = process.memoryUsage();
    const heapUsedMB = Math.round(memory.heapUsed / 1024 / 1024);
    const memoryLimitMB = MEMORY_LIMIT / 1024 / 1024;
    const cacheStats = quickCache.getStats();

    if (heapUsedMB > memoryLimitMB * 0.75) {
      console.warn('üö® –í–´–°–û–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–ê–ú–Ø–¢–ò:', {
        –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: heapUsedMB + 'MB',
        –≤—Å–µ–≥–æ: Math.round(memory.heapTotal / 1024 / 1024) + 'MB',
        –ª–∏–º–∏—Ç: memoryLimitMB + 'MB',
        —Ä–∞–∑–º–µ—Ä–ö—ç—à–∞: cacheStats.size + ' –∑–∞–ø–∏—Å–µ–π',
        –ø–∞–º—è—Ç—å–ö—ç—à–∞: cacheStats.memoryUsage
      });

      const now = Date.now();
      let cleanedCount = 0;

      for (let [key, value] of quickCache.cache.entries()) {
        if (value.priority === 'low' && (now - value.timestamp > 30000)) {
          quickCache.cache.delete(key);
          cleanedCount++;
        }
      }

      console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª–µ–Ω–æ ${cleanedCount} low-priority –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞`);

      if (global.gc) {
        global.gc();
        console.log('üîÑ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      }
    }
  }, 30000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 30 —Å–µ–∫—É–Ω–¥

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
  cacheStatsInterval = setInterval(() => {
    const stats = quickCache.getStats();

    // üî• –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (stats.size > 0 || stats.hits > 10 || stats.misses > 10) {
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:', stats);
    }

    // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–†–ò –ù–ò–ó–ö–û–ú HIT RATE
    const hitRate = parseFloat(stats.hitRate);
    if (stats.hits + stats.misses > 50 && hitRate < 20) {
      console.warn('üö® –ù–ò–ó–ö–ò–ô HIT RATE - –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫—ç—à–∞');
      quickCache.aggressiveCleanup();
    }
  }, 60000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 1 –º–∏–Ω—É—Ç—ã

  // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 9: –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –£–¢–ï–ß–ï–ö –ü–ê–ú–Ø–¢–ò
  let lastMemoryUsage = process.memoryUsage().heapUsed;
  let memoryLeakDetected = false;

  memoryLeakMonitorInterval = setInterval(() => {
    const currentMemory = process.memoryUsage();
    const memoryGrowth = currentMemory.heapUsed - lastMemoryUsage;
    const growthMB = Math.round(memoryGrowth / 1024 / 1024);

    // –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –≤—ã—Ä–æ—Å–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50MB –∑–∞ 30 —Å–µ–∫—É–Ω–¥
    if (growthMB > 50 && !memoryLeakDetected) {
      memoryLeakDetected = true;
      console.error(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –£–¢–ï–ß–ö–ê –ü–ê–ú–Ø–¢–ò: +${growthMB}MB –∑–∞ 30—Å`);

      // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      const cleaned = quickCache.emergencyCleanup();
      console.log(`üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ ${cleaned} –∑–∞–ø–∏—Å–µ–π`);

      if (global.gc) {
        global.gc();
        console.log('üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞');
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
      setTimeout(() => { memoryLeakDetected = false; }, 120000);
    }

    lastMemoryUsage = currentMemory.heapUsed;
  }, 30000);
}

function stopMonitoringIntervals() {
  if (memoryMonitorInterval) {
    clearInterval(memoryMonitorInterval);
    memoryMonitorInterval = null;
  }
  if (cacheStatsInterval) {
    clearInterval(cacheStatsInterval);
    cacheStatsInterval = null;
  }
  if (memoryLeakMonitorInterval) {
    clearInterval(memoryLeakMonitorInterval);
    memoryLeakMonitorInterval = null;
  }
  console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø EXPRESS –ò –°–ï–†–í–ò–°–û–í ====================
const express = require('express');
const cors = require("cors");
const admin = require('firebase-admin');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const { S3Client, PutObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } = require("@aws-sdk/client-s3");
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

const app = express();

const rateLimit = require('express-rate-limit');

const heavyLimiter = rateLimit({
  windowMs: 1 * 60 * 1000,
  max: 100,
  message: {
    error: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
    retryAfter: 60
  },
  standardHeaders: true,
  legacyHeaders: false
});

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 1000,
  standardHeaders: true,
  legacyHeaders: false
});

app.use(cors());
app.use(express.json());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

app.use("/send-event-notification", heavyLimiter);
app.use("/generate-upload-url", heavyLimiter);
app.use("/news", apiLimiter);
app.use("/send-message", apiLimiter);

const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024,
    files: 5
  }
});

const mimeTypeMapping = {
  'image/jpeg': '.jpg',
  'image/png': '.png',
  'image/gif': '.gif',
  'image/webp': '.webp',
  'application/pdf': '.pdf',
  'video/mp4': '.mp4',
  'video/quicktime': '.mov',
  'video/x-msvideo': '.avi',
  'video/x-matroska': '.mkv',
  'application/msword': '.doc',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
  'application/vnd.ms-excel': '.xls',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
  'application/vnd.ms-powerpoint': '.ppt',
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
  'application/zip': '.zip',
  'application/x-rar-compressed': '.rar',
  'text/plain': '.txt',
  'audio/mpeg': '.mp3',
  'audio/wav': '.wav'
};

const getFileExtension = (mimeType) => {
  return mimeTypeMapping[mimeType] || '.bin';
};

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ====================
try {
  const base64 = process.env.FIREBASE_CONFIG;
  if (!base64) throw new Error("FIREBASE_CONFIG –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env");
  const serviceAccount = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));

  const firebaseConfig = {
    credential: admin.credential.cert(serviceAccount),
    databaseURL: process.env.FIREBASE_DB_URL,
    httpAgent: new https.Agent({
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 20,
      timeout: 30000,
      freeSocketTimeout: 30000
    })
  };

  admin.initializeApp(firebaseConfig);
  console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
} catch (err) {
  console.error("üî• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", err);
}

const db = admin.database();
const auth = admin.auth();

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø AWS S3 ====================
const s3 = new S3Client({
  region: process.env.YC_S3_REGION || "ru-central1",
  endpoint: process.env.YC_S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY,
    secretAccessKey: process.env.YC_SECRET_KEY,
  }
});

const BUCKET_NAME = process.env.YC_S3_BUCKET;

// ==================== –§–£–ù–ö–¶–ò–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ====================

// üî• –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
async function getUserWithCache(userId) {
  const cacheKey = `user_${userId}`;
  const cached = quickCache.get(cacheKey);

  if (cached) {
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    }
    return cached;
  }

  if (process.env.NODE_ENV === 'development') {
    console.log(`‚ùå –ö—ç—à –ø—Ä–æ–º–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
  }

  try {
    const userSnap = await withRetry(
      () => db.ref(`users/${userId}`).once('value'),
      `–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑ Firebase`,
      8000
    );
    const userData = userSnap.val();

    if (userData) {
      quickCache.set(cacheKey, userData, 1200000, 'high');
      if (process.env.NODE_ENV === 'development') {
        console.log(`üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à`);
      }
    }

    return userData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
    return null;
  }
}

// üî• –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–°–¢–ï–ô
async function getNewsWithCache(groupId) {
  const cacheKey = `news_${groupId}`;
  const cached = quickCache.get(cacheKey);

  if (cached) {
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã: ${groupId}`);
    }
    return cached;
  }

  if (process.env.NODE_ENV === 'development') {
    console.log(`‚ùå –ö—ç—à –ø—Ä–æ–º–∞—Ö –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã: ${groupId}`);
  }

  try {
    const newsSnap = await withRetry(
      () => db.ref(`news/${groupId}`).once('value'),
      `–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã ${groupId} –∏–∑ Firebase`,
      10000
    );
    const newsData = newsSnap.val() || {};

    quickCache.set(cacheKey, newsData, 900000, 'medium');
    if (process.env.NODE_ENV === 'development') {
      console.log(`üíæ –ù–æ–≤–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã ${groupId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à`);
    }

    return newsData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã ${groupId}:`, error.message);
    return {};
  }
}

// üî• –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ì–†–£–ü–ü
async function getGroupsStructureWithCache() {
  const cacheKey = 'groups_structure';
  const cached = quickCache.get(cacheKey);

  if (cached) {
    return cached;
  }

  try {
    const groupsSnap = await withRetry(
      () => db.ref('groups').once('value'),
      '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ Firebase',
      15000
    );
    const groupsData = groupsSnap.val() || {};

    quickCache.set(cacheKey, groupsData, 3600000, 'medium');
    if (process.env.NODE_ENV === 'development') {
      console.log('üíæ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à');
    }

    return groupsData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø:', error.message);
    return {};
  }
}

// üî• –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ì–†–£–ü–ü
async function getGroupWithCache(groupId) {
  const cacheKey = `group_${groupId}`;
  const cached = quickCache.get(cacheKey);

  if (cached) {
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${groupId}`);
    }
    return cached;
  }

  if (process.env.NODE_ENV === 'development') {
    console.log(`‚ùå –ö—ç—à –ø—Ä–æ–º–∞—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã: ${groupId}`);
  }

  try {
    const groupSnap = await withRetry(
      () => db.ref(`groups/${groupId}`).once('value'),
      `–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ${groupId} –∏–∑ Firebase`,
      10000
    );
    const groupData = groupSnap.val();

    if (groupData) {
      quickCache.set(cacheKey, groupData, 1800000, 'high');
      if (process.env.NODE_ENV === 'development') {
        console.log(`üíæ –ì—Ä—É–ø–ø–∞ ${groupId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à`);
      }
    }

    return groupData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã ${groupId}:`, error.message);
    return null;
  }
}

// ==================== MIDDLEWARE –ò –£–¢–ò–õ–ò–¢–´ ====================

// üî• MIDDLEWARE –ü–†–û–í–ï–†–ö–ò –¢–û–ö–ï–ù–ê
async function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization || "";
  const token = authHeader.startsWith("Bearer ") ? authHeader.split("Bearer ")[1] : null;

  if (!token) {
    console.warn("üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
    return res.status(401).send("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞");
  }

  try {
    const decoded = await withRetry(
      () => admin.auth().verifyIdToken(token),
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Firebase',
      FIREBASE_TIMEOUT
    );
    req.user = decoded;
    if (process.env.NODE_ENV === 'development') {
      console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, uid:", decoded.uid);
    }
    next();
  } catch (err) {
    console.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫", err);
    res.status(403).send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
  }
}

// üî• –£–¢–ò–õ–ò–¢–´ S3
async function uploadToS3(buffer, fileName, contentType) {
  await s3.send(new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: fileName,
    Body: buffer,
    ContentType: contentType,
    ACL: 'public-read'
  }));
  return `https://${BUCKET_NAME}.storage.yandexcloud.net/${fileName}`;
}

async function uploadToS3WithRetry(buffer, fileName, contentType, retries = RETRY_ATTEMPTS) {
  return withRetry(
    () => uploadToS3(buffer, fileName, contentType),
    '–ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3',
    S3_TIMEOUT,
    retries
  );
}

async function deleteFromS3(urls) {
  const keys = urls.map(url => {
    const parts = url.split(`${BUCKET_NAME}/`);
    return parts[1] ? { Key: parts[1] } : null;
  }).filter(Boolean);

  if (keys.length === 0) return;

  await withRetry(
    () => s3.send(new DeleteObjectsCommand({
      Bucket: BUCKET_NAME,
      Delete: { Objects: keys }
    })),
    '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ S3',
    S3_TIMEOUT
  );
}

// ==================== –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ====================
const performanceMetrics = {
  requests: 0,
  errors: 0,
  slowRequests: 0,
  cacheHits: 0,
  cacheMisses: 0,
  startTime: Date.now()
};

// üî• MIDDLEWARE –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
app.use((req, res, next) => {
  if (req.url === '/health' || req.url === '/ping' || req.url === '/metrics' ||
      req.url === '/light-ping' || req.url === '/load-metrics') {
    return next();
  }

  performanceMetrics.requests++;
  const start = Date.now();
  const requestId = Math.random().toString(36).substring(7);

  if (process.env.NODE_ENV === 'development') {
    console.log(`üì® [${requestId}] ${req.method} ${req.url} - –ù–∞—á–∞–ª–æ`);
  }

  res.on('finish', () => {
    const duration = Date.now() - start;
    const isSlow = duration > 3000;

    if (isSlow) {
      performanceMetrics.slowRequests++;
      console.warn(`üêå [${requestId}] –ú–ï–î–õ–ï–ù–ù–û: ${req.method} ${req.url} - ${duration}–º—Å`);
    }

    if (process.env.NODE_ENV === 'development' || duration > 1000) {
      console.log(`‚úÖ [${requestId}] ${req.method} ${req.url} - ${duration}–º—Å`);
    }
  });

  next();
});

// ==================== –≠–ù–î–ü–û–ò–ù–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================

app.post('/deleteUserByName', async (req, res) => {
  const fullName = req.body.fullName?.trim().toLowerCase();
  if (!fullName) return res.status(400).send("fullName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  try {
    const groups = await getGroupsStructureWithCache();
    const usersSnap = await withRetry(
      () => db.ref('users').once('value'),
      '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏',
      15000
    );
    const users = usersSnap.val() || {};
    let found = false;

    for (const [userId, user] of Object.entries(users)) {
      const name = user.name?.trim().toLowerCase();
      const role = user.role?.trim().toLowerCase();

      if (name === fullName && role === '—Ä–æ–¥–∏—Ç–µ–ª—å') {
        found = true;

        if (user.children) {
          const filesToDelete = [];

          for (const [childId, child] of Object.entries(user.children)) {
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
              quickCache.cache.delete(`group_${child.group}`);
            }
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
          }

          if (filesToDelete.length > 0) {
            await deleteFromS3(filesToDelete);
          }
        }

        await db.ref(`users/${userId}`).remove();
        quickCache.cache.delete(`user_${userId}`);

        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
        } catch (authError) {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:", authError.message);
        }

        return res.send("–†–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –¥–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã.");
      }

      if (name === fullName && role === '–ø–µ–¥–∞–≥–æ–≥') {
        found = true;

        const groupsSnap = await withRetry(
          () => db.ref('groups').once('value'),
          '–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ–¥–∞–≥–æ–≥–∞',
          8000
        );
        const groups = groupsSnap.val() || {};

        for (const [groupId, group] of Object.entries(groups)) {
          if (group.teachers?.[userId]) {
            await db.ref(`groups/${groupId}/teachers/${userId}`).remove();
            quickCache.cache.delete(`group_${groupId}`);
          }
        }

        await db.ref(`users/${userId}`).remove();
        quickCache.cache.delete(`user_${userId}`);

        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
        } catch (authError) {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth:", authError.message);
        }

        return res.send("–ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª—ë–Ω.");
      }

      if (user.children) {
        for (const [childId, child] of Object.entries(user.children)) {
          if (child.fullName?.trim().toLowerCase() === fullName) {
            found = true;

            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
              quickCache.cache.delete(`group_${child.group}`);
            }

            const filesToDelete = [];
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
            if (filesToDelete.length > 0) {
              await deleteFromS3(filesToDelete);
            }

            await db.ref(`users/${userId}/children/${childId}`).remove();

            return res.send("–†–µ–±—ë–Ω–æ–∫ —É–¥–∞–ª—ë–Ω.");
          }
        }
      }
    }

    if (!found) {
      res.status(404).send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  } catch (err) {
    performanceMetrics.errors++;
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ deleteUserByName:", err);

    if (err.message.includes('timeout')) {
      return res.status(408).send("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
    }

    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + err.message);
  }
});

app.post('/deleteChild', async (req, res) => {
  const { userId, childId } = req.body;

  if (!userId || !childId) {
    return res.status(400).json({ error: "userId –∏ childId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    const childRef = db.ref(`users/${userId}/children/${childId}`);
    const childSnap = await withRetry(
      () => childRef.once('value'),
      '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
      8000
    );

    if (!childSnap.exists()) {
      return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const child = childSnap.val();
    const groupName = child.group;
    const childName = child.fullName.trim();

    let groupId = null;
    if (groupName) {
      const groups = await getGroupsStructureWithCache();

      for (const [id, groupData] of Object.entries(groups)) {
        if (groupData.name === groupName) {
          groupId = id;
          break;
        }
      }

      if (!groupId) {
        return res.status(404).json({ error: "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
    }

    if (groupId) {
      const groupChildrenRef = db.ref(`groups/${groupId}/children`);
      const groupChildrenSnap = await withRetry(
        () => groupChildrenRef.once('value'),
        '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π –≥—Ä—É–ø–ø—ã',
        4000
      );
      const groupChildren = groupChildrenSnap.val() || {};

      let foundGroupChildId = null;
      for (const [groupChildId, groupChildName] of Object.entries(groupChildren)) {
        if (groupChildName.trim() === childName) {
          foundGroupChildId = groupChildId;
          break;
        }
      }

      if (foundGroupChildId) {
        await groupChildrenRef.child(foundGroupChildId).remove();
        quickCache.cache.delete(`group_${groupId}`);
      }
    }

    const filesToDelete = [];
    if (child.avatarUrl) {
      filesToDelete.push(child.avatarUrl);
    }

    if (filesToDelete.length > 0) {
      await deleteFromS3(filesToDelete);
    }

    await childRef.remove();
    quickCache.cache.delete(`user_${userId}`);

    res.json({
      success: true,
      message: `–†–µ–±–µ–Ω–æ–∫ ${childName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`
    });

  } catch (err) {
    performanceMetrics.errors++;
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ deleteChild:', err);

    if (err.message.includes('timeout')) {
      return res.status(408).json({ error: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" });
    }

    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞" });
  }
});

app.post("/update-user", async (req, res) => {
  try {
    const { fullName, newEmail } = req.body;
    if (!fullName || !newEmail) return res.status(400).json({ error: "fullName –∏ newEmail –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

    const snap = await withRetry(
      () => db.ref("users").orderByChild("name").equalTo(fullName).once("value"),
      '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email',
      10000
    );
    if (!snap.exists()) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const users = snap.val();
    const keys = Object.keys(users);
    if (keys.length > 1) return res.status(400).json({ error: "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º" });

    const userKey = keys[0];
    const user = users[userKey];
    const userId = user.userId;
    if (!userId) return res.status(400).json({ error: "userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ" });

    await auth.updateUser(userId, { email: newEmail });
    await db.ref(`users/${userKey}`).update({ email: newEmail });

    quickCache.cache.delete(`user_${userId}`);

    res.json({ message: "Email –æ–±–Ω–æ–≤–ª–µ–Ω", userId, updatedUser: { name: fullName, email: newEmail } });
  } catch (err) {
    performanceMetrics.errors++;
    if (err.code === 'auth/email-already-exists') {
      return res.status(400).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
    }

    if (err.message.includes('timeout')) {
      return res.status(408).json({ error: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" });
    }

    console.error("–û—à–∏–±–∫–∞ update-user:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message });
  }
});

// ==================== –≠–ù–î–ü–û–ò–ù–¢–´ –ù–û–í–û–°–¢–ï–ô ====================

app.post("/news", verifyToken, async (req, res) => {
  try {
    const { newsId, groupId, title, description, mediaUrls = [] } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !title || !description) {
      return res.status(400).json({ error: "groupId, title –∏ description –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    if (newsId) {
      const ref = db.ref(`news/${groupId}/${newsId}`);
      const snap = await withRetry(
        () => ref.once("value"),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        8000
      );
      const oldNews = snap.val();
      if (!oldNews) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      if (oldNews.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

      const oldUrls = oldNews.mediaUrls || [];
      const keepSet = new Set(mediaUrls);
      const toDelete = oldUrls.filter(url => !keepSet.has(url));
      await deleteFromS3(toDelete);

      const newData = {
        title,
        description,
        mediaUrls,
        authorId,
        timestamp: Date.now(),
      };

      await ref.update(newData);
      quickCache.cache.delete(`news_${groupId}`);

      return res.json({ success: true, updated: true });
    }

    const id = uuidv4();
    const ref = db.ref(`news/${groupId}/${id}`);

    const data = {
      title,
      description,
      mediaUrls,
      timestamp: Date.now(),
      authorId
    };

    await ref.set(data);
    quickCache.cache.delete(`news_${groupId}`);

    return res.json({ success: true, id });

  } catch (err) {
    performanceMetrics.errors++;

    if (err.message.includes('timeout')) {
      return res.status(408).json({ error: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" });
    }

    console.error("–û—à–∏–±–∫–∞ POST /news:", err);
    res.status(500).json({ error: err.message });
  }
});

app.get("/news", verifyToken, async (req, res) => {
  try {
    const groupId = req.query.groupId;
    if (!groupId) {
      return res.status(400).json({ error: "groupId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    const newsData = await getNewsWithCache(groupId);

    const newsList = Object.entries(newsData).map(([id, news]) => ({
      id,
      title: news.title,
      description: news.description,
      groupId: groupId,
      authorId: news.authorId,
      mediaUrls: news.mediaUrls || [],
      timestamp: news.timestamp || 0
    }));

    newsList.sort((a, b) => b.timestamp - a.timestamp);

    const cacheStatus = quickCache.get(`news_${groupId}`) ? 'hit' : 'miss';
    res.set({
      'X-Cache-Status': cacheStatus,
      'X-Cache-Hits': quickCache.stats.hits,
      'X-Cache-Misses': quickCache.stats.misses
    });

    res.json(newsList);

  } catch (err) {
    performanceMetrics.errors++;

    if (err.message.includes('timeout')) {
      return res.status(408).json({ error: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" });
    }

    console.error("–û—à–∏–±–∫–∞ GET /news:", err);
    res.status(500).json({ error: err.message });
  }
});

app.post("/deleteNews", verifyToken, async (req, res) => {
  try {
    const { groupId, newsId } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !newsId) {
      return res.status(400).json({ error: "groupId –∏ newsId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const snap = await withRetry(
      () => db.ref(`news/${groupId}/${newsId}`).once('value'),
      '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
      4000
    );
    const data = snap.val();
    if (!data) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    if (data.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

    const urls = data.mediaUrls || [];
    await deleteFromS3(urls);
    await db.ref(`news/${groupId}/${newsId}`).remove();

    quickCache.cache.delete(`news_${groupId}`);

    res.json({ success: true });
  } catch (err) {
    performanceMetrics.errors++;

    if (err.message.includes('timeout')) {
      return res.status(408).json({ error: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" });
    }

    console.error("–û—à–∏–±–∫–∞ deleteNews:", err);
    res.status(500).json({ error: err.message });
  }
});

// ==================== –≠–ù–î–ü–û–ò–ù–¢–´ S3 –ò –§–ê–ô–õ–û–í ====================

app.post('/generate-upload-url', verifyToken, async (req, res) => {
  try {
    const { fileName, fileType, groupId, isPrivateChat, context } = req.body;

    if (!fileName || !fileType) {
      return res.status(400).json({ error: "fileName –∏ fileType –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const fileExtension = getFileExtension(fileType);
    let finalFileName = fileName;

    if (!finalFileName.includes('.') || !finalFileName.toLowerCase().endsWith(fileExtension.toLowerCase())) {
      const baseName = finalFileName.includes('.')
        ? finalFileName.substring(0, finalFileName.lastIndexOf('.'))
        : finalFileName;
      finalFileName = baseName + fileExtension;
    }

    let folder;
    let finalGroupId = groupId;

    if (context === 'news') {
      folder = 'news/';
    } else if (isPrivateChat === true) {
      folder = 'private-chats/';
    } else if (groupId && groupId.startsWith('private_')) {
      folder = 'private-chats/';
      finalGroupId = groupId.replace('private_', '');
    } else if (groupId) {
      folder = 'group-chats/';
    } else {
      folder = 'misc/';
    }

    if (finalGroupId && folder !== 'news/') {
      const hasAccess = await withRetry(
        () => checkChatAccess(req.user.uid, finalGroupId, folder === 'private-chats/'),
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É',
        4000
      );
      if (!hasAccess) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É" });
      }
    }

    const timestamp = Date.now();
    const uniqueId = uuidv4().substring(0, 8);
    const safeFileName = finalFileName.replace(/[^a-zA-Z0-9.-]/g, '_');
    const key = `${folder}${finalGroupId ? finalGroupId + '/' : ''}${timestamp}_${uniqueId}_${safeFileName}`;

    const signedUrlParams = {
      Bucket: BUCKET_NAME,
      Key: key,
      ContentType: String(fileType),
      ACL: "public-read"
    };

    const command = new PutObjectCommand(signedUrlParams);
    const uploadUrl = await withRetry(
      () => getSignedUrl(s3, command, { expiresIn: 300 }),
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL S3',
      4000
    );
    const fileUrl = `https://${BUCKET_NAME}.storage.yandexcloud.net/${key}`;

    res.json({
      success: true,
      uploadUrl,
      fileUrl,
      fileName: finalFileName,
      key,
      expiresIn: 300,
      expiresAt: Date.now() + 300000
    });

  } catch (err) {
    performanceMetrics.errors++;
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ upload URL:", err);

    if (err.message.includes('timeout')) {
      return res.status(408).json({
        success: false,
        error: "–û–ø–µ—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
      });
    }

    if (err.name === 'CredentialsProviderError') {
      return res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ credentials"
      });
    }

    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
    });
  }
});

async function checkChatAccess(userId, chatId, isPrivate) {
  try {
    if (isPrivate) {
      const parts = chatId.split('_');
      return parts.includes(userId);
    } else {
      const groupData = await getGroupWithCache(chatId);
      return !!groupData;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É:', error);
    return false;
  }
}

async function isPrivateChatId(chatId) {
  try {
    if (chatId.includes('_')) {
      const privateChatRef = db.ref(`chats/private/${chatId}`);
      const privateSnap = await withRetry(
        () => privateChatRef.once('value'),
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞',
        4000
      );

      if (privateSnap.exists()) {
        return true;
      }

      const groupChatRef = db.ref(`chats/groups/${chatId}`);
      const groupSnap = await withRetry(
        () => groupChatRef.once('value'),
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞',
        4000
      );

      if (groupSnap.exists()) {
        return false;
      }

      return true;
    }

    const groupChatRef = db.ref(`chats/groups/${chatId}`);
    const groupSnap = await withRetry(
      () => groupChatRef.once('value'),
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞',
      4000
    );

    return !groupSnap.exists();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞:", error);
    return chatId.includes('_');
  }
}

// ==================== –≠–ù–î–ü–û–ò–ù–¢–´ –ß–ê–¢–û–í –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

app.post("/send-message", verifyToken, async (req, res) => {
  try {
    const { chatId, message, messageType = "text", fileUrl, fileName } = req.body;
    const senderId = req.user.uid;

    if (!chatId || !message) {
      return res.status(400).json({ error: "chatId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const sender = await getUserWithCache(senderId);
    const senderName = sender?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

    const messageId = uuidv4();
    const messageData = {
      id: messageId,
      senderId,
      senderName,
      text: message,
      timestamp: Date.now(),
      fileUrl: fileUrl || null,
      fileType: messageType,
      fileName: fileName || null
    };

    const isPrivateChat = await withRetry(
      () => isPrivateChatId(chatId),
      '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞',
      4000
    );

    let chatRef;
    if (isPrivateChat) {
      chatRef = db.ref(`chats/private/${chatId}/messages/${messageId}`);
    } else {
      chatRef = db.ref(`chats/groups/${chatId}/messages/${messageId}`);
    }

    await chatRef.set(messageData);

    sendChatNotification({
      chatId,
      senderId,
      senderName,
      message,
      messageType,
      fileUrl,
      fileName,
      isPrivate: isPrivateChat
    }).catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err));

    res.json({
      success: true,
      messageId,
      timestamp: messageData.timestamp
    });

  } catch (err) {
    performanceMetrics.errors++;

    if (err.message.includes('timeout')) {
      return res.status(408).json({ error: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" });
    }

    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    res.status(500).json({ error: err.message });
  }
});

app.post("/save-fcm-token", verifyToken, async (req, res) => {
  try {
    const { fcmToken } = req.body;
    const userId = req.user.uid;

    if (!fcmToken) {
      return res.status(400).json({ error: "fcmToken –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    await db.ref(`users/${userId}`).update({
      fcmToken,
      fcmTokenUpdated: Date.now()
    });

    quickCache.cache.delete(`user_${userId}`);

    res.json({ success: true });

  } catch (err) {
    performanceMetrics.errors++;
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:", err);
    res.status(500).json({ error: err.message });
  }
});

async function removeInvalidToken(invalidToken) {
  try {
    const usersSnap = await withRetry(
      () => db.ref('users').once('value'),
      '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞',
      8000
    );
    const users = usersSnap.val() || {};

    for (const [userId, user] of Object.entries(users)) {
      if (user.fcmToken === invalidToken) {
        await db.ref(`users/${userId}`).update({ fcmToken: null });
        quickCache.cache.delete(`user_${userId}`);
        return { success: true, userId };
      }
    }

    return { success: false, message: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" };

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", err);
    return { success: false, error: err.message };
  }
}

async function sendChatNotification({
  chatId,
  senderId,
  senderName,
  message,
  messageType,
  fileUrl,
  fileName,
  isPrivate
}) {
  try {
    let recipients = [];
    let chatTitle = "";

    if (isPrivate) {
      const parts = chatId.split('_');
      const otherUserId = parts.find(id => id !== senderId);

      if (otherUserId) {
        const user = await getUserWithCache(otherUserId);
        if (user && user.fcmToken) {
          recipients.push({
            userId: otherUserId,
            name: user.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            fcmToken: user.fcmToken
          });
        }
      }
    } else {
      const group = await getGroupWithCache(chatId);
      if (group) {
        chatTitle = group.name || "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç";

        if (group.teachers) {
          for (const [teacherId, teacherName] of Object.entries(group.teachers)) {
            if (teacherId !== senderId) {
              const teacher = await getUserWithCache(teacherId);
              if (teacher && teacher.fcmToken) {
                recipients.push({
                  userId: teacherId,
                  name: teacherName,
                  fcmToken: teacher.fcmToken
                });
              }
            }
          }
        }
      }
    }

    let successful = 0;
    for (const recipient of recipients) {
      try {
        const messagePayload = {
          token: recipient.fcmToken,
          notification: {
            title: `üí¨ ${isPrivate ? senderName : chatTitle}`,
            body: messageType === 'text' ? message : `üìé ${getFileTypeText(messageType)}`
          },
          data: {
            type: "chat",
            chatId: chatId,
            senderId: senderId,
            senderName: senderName,
            message: message,
            isGroup: String(!isPrivate),
            timestamp: String(Date.now())
          }
        };

        await admin.messaging().send(messagePayload);
        successful++;
      } catch (tokenError) {
        if (tokenError.code === "messaging/registration-token-not-registered") {
          await removeInvalidToken(recipient.fcmToken);
        }
      }
    }

    return { successful, total: recipients.length };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendChatNotification:", error);
    return { successful: 0, total: 0 };
  }
}

function getFileTypeText(messageType) {
  switch (messageType) {
    case 'image': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    case 'video': return '–í–∏–¥–µ–æ';
    case 'audio': return '–ê—É–¥–∏–æ';
    case 'file': return '–§–∞–π–ª';
    default: return '–§–∞–π–ª';
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–û–î–ò–¢–ï–õ–Ø–ú–ò ====================

async function preloadParentsData(groupId) {
  const cacheKey = `parents_${groupId}`;
  const cached = quickCache.get(cacheKey);

  if (cached) {
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã: ${groupId}`);
    }
    return cached;
  }

  if (process.env.NODE_ENV === 'development') {
    console.log(`‚ùå –ö—ç—à –ø—Ä–æ–º–∞—Ö –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã: ${groupId}`);
  }

  try {
    const [groupData, allParents] = await Promise.all([
      getGroupWithCache(groupId),
      withRetry(() =>
        db.ref('users')
          .orderByChild('role')
          .equalTo('–†–æ–¥–∏—Ç–µ–ª—å')
          .once('value'),
        '–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π',
        15000
      )
    ]);

    const childrenInGroup = groupData?.children || {};
    const childIds = Object.keys(childrenInGroup);

    if (childIds.length === 0) {
      quickCache.set(cacheKey, [], 300000, 'medium');
      return [];
    }

    const users = allParents.val() || {};
    const parents = [];
    const foundParentIds = new Set();

    const childNamesMap = new Map();
    Object.entries(childrenInGroup).forEach(([childId, childName]) => {
      childNamesMap.set(childName.trim().toLowerCase(), childId);
    });

    for (const [userId, user] of Object.entries(users)) {
      if (user.children && !foundParentIds.has(userId)) {
        for (const [parentChildId, parentChildData] of Object.entries(user.children)) {
          if (parentChildData && parentChildData.fullName) {
            const normalizedName = parentChildData.fullName.trim().toLowerCase();

            if (childNamesMap.has(normalizedName)) {
              parents.push({
                userId: userId,
                name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
                fcmToken: user.fcmToken || null,
                childId: parentChildId,
                childName: parentChildData.fullName,
                childBirthDate: parentChildData.birthDate || "",
                childGroup: groupId
              });
              foundParentIds.add(userId);
              break;
            }
          }
        }
      }
    }

    quickCache.set(cacheKey, parents, 600000, 'high');
    if (process.env.NODE_ENV === 'development') {
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã ${groupId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à (${parents.length} —Ä–æ–¥–∏—Ç–µ–ª–µ–π)`);
    }

    return parents;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:", error);
    return [];
  }
}

async function findParentsByGroupIdOptimized(groupId) {
  return await preloadParentsData(groupId);
}

async function sendNotificationsParallel(recipients, createMessagePayload, batchSize = 15) {
  const results = {
    successful: 0,
    failed: 0,
    errors: []
  };

  for (let i = 0; i < recipients.length; i += batchSize) {
    const batch = recipients.slice(i, i + batchSize);

    const promises = batch.map(async (recipient) => {
      try {
        const messagePayload = createMessagePayload(recipient);
        await admin.messaging().send(messagePayload);
        return { success: true, recipient };
      } catch (error) {
        if (error.code === "messaging/registration-token-not-registered") {
          await removeInvalidToken(recipient.fcmToken);
        }
        return { success: false, recipient, error };
      }
    });

    const batchResults = await Promise.allSettled(promises);

    batchResults.forEach(result => {
      if (result.status === 'fulfilled') {
        if (result.value.success) {
          results.successful++;
        } else {
          results.failed++;
          results.errors.push(result.value.error);
        }
      } else {
        results.failed++;
        results.errors.push(result.reason);
      }
    });

    if (i + batchSize < recipients.length) {
      await new Promise(resolve => setTimeout(resolve, 50));
    }
  }

  return results;
}

async function sendEventNotificationsOptimized({
  parents,
  groupId,
  groupName,
  eventId,
  title,
  time,
  place,
  comments,
  date,
  notificationBody
}) {
  try {
    const parentsWithTokens = parents.filter(parent => parent.fcmToken && parent.fcmToken.trim() !== "");

    if (parentsWithTokens.length === 0) {
      return { successful: 0, failed: 0, totalTokens: 0 };
    }

    const createMessagePayload = (parent) => ({
      token: parent.fcmToken,
      notification: {
        title: "üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
        body: notificationBody
      },
      data: {
        type: "new_event",
        autoOpenFragment: "events",
        groupId: String(groupId || ""),
        groupName: String(groupName || ""),
        eventId: String(eventId || ""),
        title: String(title || ""),
        time: String(time || ""),
        place: String(place || ""),
        comments: String(comments || ""),
        date: String(date || ""),
        timestamp: String(Date.now()),
        childId: parent.childId || "",
        userId: parent.userId || "",
        childFullName: parent.childName || "",
        childGroup: String(groupName || ""),
        childBirthDate: parent.childBirthDate || ""
      }
    });

    return await sendNotificationsParallel(parentsWithTokens, createMessagePayload, 20);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendEventNotificationsOptimized:", err);
    return { successful: 0, failed: parents.length, errors: [err] };
  }
}

app.post("/send-event-notification", verifyToken, async (req, res) => {
  try {
    const { groupId, eventId, title, time, place, comments, date } = req.body;

    if (!groupId || !eventId || !title) {
      return res.status(400).json({
        error: "groupId, eventId, title –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    const actualGroupName = await withRetry(
      () => getGroupName(groupId),
      '–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã',
      8000
    );

    const parents = await withRetry(
      () => findParentsByGroupIdOptimized(groupId),
      '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π',
      20000
    );

    if (parents.length === 0) {
      return res.json({
        success: true,
        message: "–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
      });
    }

    const notificationBody = formatEventNotification(title, time, place, actualGroupName);

    const sendResults = await sendEventNotificationsOptimized({
      parents: parents,
      groupId,
      groupName: actualGroupName,
      eventId,
      title,
      time,
      place,
      comments,
      date,
      notificationBody
    });

    res.json({
      success: true,
      message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${sendResults.successful} —Ä–æ–¥–∏—Ç–µ–ª—è–º`,
      recipients: sendResults.successful,
      totalParents: parents.length,
      parentsWithTokens: sendResults.successful,
      failed: sendResults.failed
    });

  } catch (err) {
    performanceMetrics.errors++;

    if (err.message.includes('timeout')) {
      return res.status(408).json({
        error: "–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
      });
    }

    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏:", err);
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
    });
  }
});

async function getGroupName(groupId) {
  try {
    const groupData = await getGroupWithCache(groupId);
    return groupData?.name || `–ì—Ä—É–ø–ø–∞ ${groupId}`;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:", error);
    return `–ì—Ä—É–ø–ø–∞ ${groupId}`;
  }
}

function formatEventNotification(title, time, place, groupName) {
  let notification = `üìÖ ${title}`;
  if (time) notification += ` –≤ ${time}`;
  if (place) notification += ` (${place})`;
  if (groupName) notification += ` ‚Ä¢ ${groupName}`;
  return notification;
}

// ==================== –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø OPTIMIZATION ====================
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞
app.post("/warmup-cache", async (req, res) => {
  try {
    console.log('üî• –†–∞–∑–æ–≥—Ä–µ–≤ –∫—ç—à–∞...');

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const startTime = Date.now();

    await Promise.allSettled([
      getGroupsStructureWithCache(),
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    ]);

    const duration = Date.now() - startTime;

    res.json({
      success: true,
      message: "–ö—ç—à —Ä–∞–∑–æ–≥—Ä–µ—Ç",
      duration: `${duration}ms`,
      stats: quickCache.getStats()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stats: quickCache.getStats()
    });
  }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
app.get("/environment", (req, res) => {
  res.json({
    node_env: process.env.NODE_ENV,
    port: process.env.PORT,
    render_external_url: process.env.RENDER_EXTERNAL_URL,
    render: process.env.RENDER ? 'true' : 'false',
    memory_limit: MEMORY_LIMIT / 1024 / 1024 + 'MB',
    thread_pool: THREAD_POOL_SIZE,
    firebase_initialized: !!admin.apps.length,
    s3_configured: !!(process.env.YC_ACCESS_KEY && process.env.YC_SECRET_KEY),
    timestamp: new Date().toISOString()
  });
});

// üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 10: –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô
app.get("/connection-stats", (req, res) => {
  res.json({
    connections: connectionCounters,
    memory: process.memoryUsage(),
    cacheSize: quickCache.cache.size,
    uptime: Math.round(process.uptime()),
    timestamp: Date.now()
  });
});

// ==================== HEALTH CHECKS –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ====================

app.get("/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: Date.now(),
    uptime: Math.round(process.uptime())
  });
});

app.get("/light-ping", (req, res) => {
  const cacheKey = 'light_ping_response';
  const cached = healthCache.get(cacheKey);

  if (cached) {
    res.set({
      'X-Cache': 'hit',
      'X-Cache-TTL': '5000'
    });
    res.json(cached);
    return;
  }

  const response = {
    pong: Date.now(),
    status: "alive",
    version: "2.0.0-optimized-cache",
    cached: true,
    timestamp: Date.now()
  };

  healthCache.set(cacheKey, response, 5000, 'high');
  res.set({
    'X-Cache': 'miss',
    'X-Cache-TTL': '5000'
  });
  res.json(response);
});

app.get("/load-metrics", (req, res) => {
  const cacheKey = 'load_metrics_current';
  const cached = quickCache.get(cacheKey);

  if (cached) {
    res.set({
      'X-Cache': 'hit',
      'X-Cache-TTL': '3000'
    });
    res.json(cached);
    return;
  }

  const load = os.loadavg();
  const memory = process.memoryUsage();
  const uptime = Date.now() - performanceMetrics.startTime;
  const requestsPerMinute = (performanceMetrics.requests / (uptime / 60000)).toFixed(2);

  const response = {
    loadAverage: load,
    memory: {
      used: Math.round(memory.heapUsed / 1024 / 1024) + 'MB',
      total: Math.round(memory.heapTotal / 1024 / 1024) + 'MB',
      rss: Math.round(memory.rss / 1024 / 1024) + 'MB'
    },
    performance: {
      activeRequests: performanceMetrics.requests,
      requestsPerMinute: requestsPerMinute,
      errorRate: ((performanceMetrics.errors / Math.max(performanceMetrics.requests, 1)) * 100).toFixed(2) + '%',
      slowRequests: performanceMetrics.slowRequests
    },
    cache: quickCache.getStats(),
    healthCache: healthCache.getStats(),
    system: {
      cpuCores: os.cpus().length,
      threadPool: THREAD_POOL_SIZE,
      uptime: Math.round(process.uptime()) + 's'
    }
  };

  quickCache.set(cacheKey, response, 3000, 'high');
  res.set({
    'X-Cache': 'miss',
    'X-Cache-TTL': '3000'
  });
  res.json(response);
});

app.get("/keep-alive", (req, res) => {
  console.log(`üåê External keep-alive ping from: ${req.ip || 'unknown'}`);

  res.json({
    status: "alive",
    server_time: new Date().toISOString(),
    uptime: Math.round(process.uptime()) + "s",
    version: "2.0.0-optimized-cache",
    environment: process.env.NODE_ENV || 'production'
  });
});

app.get("/wake-up", async (req, res) => {
  console.log('üîî –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–µ–Ω –≤–Ω–µ—à–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º');

  try {
    const firebaseAlive = await withStrictTimeout(
      db.ref('.info/connected').once('value'),
      3000,
      'Wake-up Firebase check'
    );

    res.json({
      status: "awake",
      timestamp: new Date().toISOString(),
      dependencies: {
        firebase: true,
        s3: true
      },
      message: "–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    });
  } catch (error) {
    res.status(500).json({
      status: "awake_with_issues",
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

app.get("/metrics", (req, res) => {
  const uptime = Date.now() - performanceMetrics.startTime;
  const requestsPerMinute = (performanceMetrics.requests / (uptime / 60000)).toFixed(2);
  const errorRate = performanceMetrics.requests > 0
    ? ((performanceMetrics.errors / performanceMetrics.requests) * 100).toFixed(2)
    : 0;

  res.json({
    uptime: Math.round(uptime / 1000) + 's',
    total_requests: performanceMetrics.requests,
    requests_per_minute: requestsPerMinute,
    error_rate: errorRate + '%',
    slow_requests: performanceMetrics.slowRequests,
    memory: {
      rss: Math.round(process.memoryUsage().rss / 1024 / 1024) + 'MB',
      heap: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB',
      external: Math.round(process.memoryUsage().external / 1024 / 1024) + 'MB'
    },
    cache: quickCache.getStats(),
    gc: global.gc ? 'available' : 'unavailable'
  });
});

app.get("/deep-health", async (req, res) => {
  const checks = {
    firebase: false,
    s3: false,
    memory: false,
    cache: false
  };

  try {
    const fbCheck = await withStrictTimeout(
      db.ref('.info/connected').once('value'),
      3000,
      '–ì–ª—É–±–æ–∫–∏–π health check Firebase'
    );
    checks.firebase = true;

    const s3Check = await withStrictTimeout(
      s3.send(new PutObjectCommand({
        Bucket: BUCKET_NAME,
        Key: 'health-check',
        Body: Buffer.from('health'),
        ContentType: 'text/plain'
      })),
      5000,
      '–ì–ª—É–±–æ–∫–∏–π health check S3'
    );
    checks.s3 = true;

    checks.memory = process.memoryUsage().heapUsed < MEMORY_LIMIT * 0.8;
    checks.cache = quickCache.cache.size < quickCache.maxSize;

    const allHealthy = Object.values(checks).every(Boolean);
    res.status(allHealthy ? 200 : 503).json({
      status: allHealthy ? 'healthy' : 'degraded',
      timestamp: Date.now(),
      checks
    });

  } catch (error) {
    res.status(503).json({
      status: 'unhealthy',
      timestamp: Date.now(),
      checks,
      error: error.message
    });
  }
});

app.get("/info", (req, res) => {
  res.json({
    service: "Firebase Admin Notification Server",
    version: "2.0.0-optimized-cache",
    optimization: {
      lru_cache: "enhanced",
      cache_priorities: "implemented",
      user_caching: "implemented",
      news_caching: "implemented",
      groups_caching: "implemented",
      health_cache: "implemented",
      cache_monitoring: "enhanced"
    },
    cache_config: {
      max_size: quickCache.maxSize,
      max_memory: Math.round(quickCache.maxMemoryBytes / 1024 / 1024) + "MB",
      default_ttl: "10 minutes",
      priorities: ["high", "medium", "low"]
    },
    endpoints: {
      "GET /light-ping": "–ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
      "GET /load-metrics": "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
      "GET /news": "–ù–æ–≤–æ—Å—Ç–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
      "POST /send-message": "–°–æ–æ–±—â–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      "GET /health": "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
      "GET /deep-health": "–ì–ª—É–±–æ–∫–∏–π health check",
      "GET /info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫—ç—à–µ",
      "POST /warmup-cache": "–†–∞–∑–æ–≥—Ä–µ–≤ –∫—ç—à–∞",
      "GET /environment": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏",
      "GET /connection-stats": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
    }
  });
});

app.get("/ping", async (req, res) => {
  const start = Date.now();
  const diagnostics = {};

  try {
    const fbStart = Date.now();
    await withStrictTimeout(
      db.ref('.info/connected').once('value'),
      2000,
      '–ü–∏–Ω–≥ Firebase'
    );
    diagnostics.firebase = `${Date.now() - fbStart}ms`;
    diagnostics.total = `${Date.now() - start}ms`;

    res.json({
      pong: Date.now(),
      simple: true,
      diagnostics
    });

  } catch (error) {
    res.status(500).json({
      error: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å",
      message: error.message
    });
  }
});

app.get("/stress-test", async (req, res) => {
  const start = Date.now();
  const tests = [];
  tests.push({ name: "simple_response", time: "0ms" });

  const fbStart = Date.now();
  try {
    await withStrictTimeout(
      db.ref('.info/connected').once('value'),
      2000,
      '–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç Firebase'
    );
    tests.push({ name: "firebase_connect", time: `${Date.now() - fbStart}ms` });
  } catch (error) {
    tests.push({ name: "firebase_connect", time: `error: ${error.message}` });
  }

  const memory = process.memoryUsage();

  const eventLoopStart = Date.now();
  await new Promise(resolve => setImmediate(resolve));
  const eventLoopLag = Date.now() - eventLoopStart;

  res.json({
    status: "OK",
    timestamp: Date.now(),
    total_time: `${Date.now() - start}ms`,
    memory: {
      rss: Math.round(memory.rss / 1024 / 1024) + "MB",
      heap: Math.round(memory.heapUsed / 1024 / 1024) + "MB",
      heap_total: Math.round(memory.heapTotal / 1024 / 1024) + "MB"
    },
    performance: {
      uptime: Math.round(process.uptime()) + "s",
      event_loop_lag: `${eventLoopLag}ms`,
      quick_cache_size: quickCache.cache.size
    },
    tests
  });
});

app.get("/cache-stats", (req, res) => {
  const stats = quickCache.getStats();
  const healthStats = healthCache.getStats();

  res.json({
    quickCache: stats,
    healthCache: healthStats,
    globalPerformance: global.performanceMetrics,
    timestamp: Date.now(),
    cacheKeys: Array.from(quickCache.cache.keys()).slice(0, 10)
  });
});

app.post("/reset-cache", (req, res) => {
  const oldStats = quickCache.getStats();
  const oldHealthStats = healthCache.getStats();

  quickCache.cache.clear();
  quickCache.stats = { hits: 0, misses: 0, evictions: 0, sets: 0 };

  healthCache.cache.clear();
  healthCache.stats = { hits: 0, misses: 0, evictions: 0, sets: 0 };

  res.json({
    success: true,
    message: "–ö—ç—à —Å–±—Ä–æ—à–µ–Ω",
    oldStats: {
      quickCache: oldStats,
      healthCache: oldHealthStats
    },
    newStats: {
      quickCache: quickCache.getStats(),
      healthCache: healthCache.getStats()
    }
  });
});

app.get("/", (req, res) => {
  res.json({
    message: "Firebase Admin Server —Ä–∞–±–æ—Ç–∞–µ—Ç (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 2.0 –° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú)",
    timestamp: Date.now(),
    endpoints: [
      "/light-ping - –ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
      "/load-metrics - –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏",
      "/health - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
      "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫—ç—à–µ",
      "/ping - –ü–∏–Ω–≥ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π",
      "/stress-test - –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏",
      "/metrics - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "/warmup-cache - –†–∞–∑–æ–≥—Ä–µ–≤ –∫—ç—à–∞",
      "/environment - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏",
      "/connection-stats - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
    ]
  });
});

// ==================== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–≠–®–ê ====================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setTimeout(() => {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∞
  const testData = {
    test: 'data',
    timestamp: Date.now()
  };

  quickCache.set('test_key', testData, 30000, 'high');
  const retrieved = quickCache.get('test_key');

  if (retrieved) {
    console.log('‚úÖ –¢–µ—Å—Ç –∫—ç—à–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } else {
    console.log('‚ùå –¢–µ—Å—Ç –∫—ç—à–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω');
  }
}, 5000);

// ==================== –ê–í–¢–û-–ü–ò–ù–ì –°–ò–°–¢–ï–ú–ê ====================

const KEEP_ALIVE_INTERVAL = 10 * 60 * 1000;
let keepAliveInterval = null;
let consecutiveFailures = 0;
const MAX_CONSECUTIVE_FAILURES = 10;

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞ –¥–ª—è Render.com
function enhancedKeepAlivePing() {
  const baseUrl = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`;
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
  const pingUrl = `${baseUrl}/health`;
  const startTime = Date.now();

  const protocol = pingUrl.startsWith('https') ? require('https') : require('http');

  const req = protocol.get(pingUrl, (res) => {
    const duration = Date.now() - startTime;
    const success = res.statusCode === 200;

    if (success) {
      consecutiveFailures = 0;
      if (process.env.NODE_ENV === 'development' || duration > 1000) {
        console.log(`üèì –ê–≤—Ç–æ-–ø–∏–Ω–≥: ‚úÖ ${duration}–º—Å - ${new Date().toLocaleTimeString()}`);
      }
    } else {
      consecutiveFailures++;
      console.warn(`üèì –ê–≤—Ç–æ-–ø–∏–Ω–≥: ‚ùå –°—Ç–∞—Ç—É—Å ${res.statusCode} - –û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: ${consecutiveFailures}`);
    }
  });

  req.setTimeout(10000, () => { // –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–æ 10—Å
    consecutiveFailures++;
    console.warn(`üèì –ê–≤—Ç–æ-–ø–∏–Ω–≥: ‚è∞ –¢–∞–π–º–∞—É—Ç 10—Å - –û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: ${consecutiveFailures}`);
    req.destroy();
  });

  req.on('error', (err) => {
    consecutiveFailures++;
    console.warn(`üèì –ê–≤—Ç–æ-–ø–∏–Ω–≥: üî• –û—à–∏–±–∫–∞ - ${err.message} - –û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: ${consecutiveFailures}`);
  });

  if (consecutiveFailures >= MAX_CONSECUTIVE_FAILURES) {
    console.error('üö® –í–ù–ò–ú–ê–ù–ò–ï: –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞, –Ω–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
function startKeepAliveSystem() {
  // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–ø–∏–Ω–≥ –≤ production –Ω–∞ Render (–æ–Ω–∏ —Å–∞–º–∏ –ø–∏–Ω–≥—É—é—Ç)
  if (process.env.NODE_ENV === 'production' && process.env.RENDER_EXTERNAL_URL) {
    console.log('üîî –ê–≤—Ç–æ-–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ production –Ω–∞ Render.com');
    return;
  }

  if (keepAliveInterval) {
    clearInterval(keepAliveInterval);
  }

  console.log(`üîî –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞: –∫–∞–∂–¥—ã–µ ${KEEP_ALIVE_INTERVAL / 60000} –º–∏–Ω—É—Ç`);

  keepAliveInterval = setInterval(enhancedKeepAlivePing, KEEP_ALIVE_INTERVAL);

  setTimeout(enhancedKeepAlivePing, 30000);
}

function stopKeepAliveSystem() {
  if (keepAliveInterval) {
    clearInterval(keepAliveInterval);
    keepAliveInterval = null;
    console.log('üîî –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 8: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—Ç –¥–ª—è Render.com
const PORT = process.env.PORT || 10000; // Render.com –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 9: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Render.com
if (process.env.RENDER_EXTERNAL_URL) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ Render.com –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
  console.log(`üåê External URL: ${process.env.RENDER_EXTERNAL_URL}`);
  console.log(`üîß Port: ${process.env.PORT}`);
}

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 2.0 –° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú)`);
  console.log(`‚úÖ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: ${MEMORY_LIMIT / 1024 / 1024}MB`);
  console.log(`‚úÖ –õ–∏–º–∏—Ç –∫—ç—à–∞: ${quickCache.maxSize} –∑–∞–ø–∏—Å–µ–π`);
  console.log(`‚úÖ –¢–∞–π–º–∞—É—Ç Firebase: ${FIREBASE_TIMEOUT}–º—Å`);
  console.log(`‚úÖ –¢–∞–π–º–∞—É—Ç S3: ${S3_TIMEOUT}–º—Å`);
  console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞: ${RETRY_ATTEMPTS}`);
  console.log(`‚úÖ –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤: ${THREAD_POOL_SIZE}`);
  console.log(`‚úÖ –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤: –≤–∫–ª—é—á–µ–Ω`);
  console.log(`‚úÖ –ê–≤—Ç–æ-–ø–∏–Ω–≥: –∫–∞–∂–¥—ã–µ ${KEEP_ALIVE_INTERVAL / 60000} –º–∏–Ω—É—Ç`);

  // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 11: –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–ò –°–¢–ê–†–¢–ï
  startMonitoringIntervals();
  startKeepAliveSystem();

  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
  setTimeout(preloadCriticalData, 10000);

  setTimeout(() => {
    require('http').get(`http://localhost:${PORT}/deep-health`, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          console.log(`üîç –ì–ª—É–±–æ–∫–∏–π health check —á–µ—Ä–µ–∑ 30s: ${result.status}`);
        } catch (e) {
          console.log('üîç –ì–ª—É–±–æ–∫–∏–π health check –≤—ã–ø–æ–ª–Ω–µ–Ω (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞)');
        }
      });
    }).on('error', (err) => {
      console.log('üîç –ì–ª—É–±–æ–∫–∏–π health check –Ω–µ —É–¥–∞–ª—Å—è:', err.message);
    });
  }, 30000);
});

server.keepAliveTimeout = 60000;
server.headersTimeout = 65000;

// üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 12: –£–õ–£–ß–®–ï–ù–ù–´–ô GRACEFUL SHUTDOWN
function gracefulShutdown() {
  console.log('üîÑ –ù–∞—á–∞–ª–æ –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...');

  stopKeepAliveSystem();
  stopMonitoringIntervals(); // üî• –î–û–ë–ê–í–ò–¢–¨ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:', quickCache.getStats());
  console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ health –∫—ç—à–∞:', healthCache.getStats());
  console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', connectionCounters);

  // –û—á–∏—â–∞–µ–º –∫—ç—à
  quickCache.destroy();
  healthCache.destroy();

  server.close(() => {
    console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º Firebase —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (admin.apps.length) {
      Promise.all(admin.apps.map(app => app.delete()))
        .then(() => {
          console.log('‚úÖ Firebase —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
          process.exit(0);
        })
        .catch(err => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Firebase:', err);
          process.exit(1);
        });
    } else {
      process.exit(0);
    }
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.log('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
    process.exit(1);
  }, 8000);
}

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

process.on('warning', (warning) => {
  if (warning.name === 'MaxListenersExceededWarning' ||
      warning.message.includes('memory')) {
    console.error('üö® –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏', warning.message);

    if (!emergencyMode) {
      emergencyMode = true;

      const deleted = quickCache.emergencyCleanup();
      console.log(`üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ ${deleted} –∑–∞–ø–∏—Å–µ–π`);

      if (global.gc) {
        global.gc();
        console.log('üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      }

      setTimeout(() => {
        emergencyMode = false;
        console.log('üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      }, 120000);
    }
  }
});

// üî• –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function preloadCriticalData() {
  console.log('üî• –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à...');
  try {
    await getGroupsStructureWithCache();
    console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à');

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const stats = quickCache.getStats();
    console.log('üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', {
      size: stats.size,
      memoryUsage: stats.memoryUsage,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.log('‚ö†Ô∏è –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞:', error.message);
  }
}

console.log('üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:');
console.log('   ‚Ä¢ LRU –ö—ç—à —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º persistence');
console.log('   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —ç–≤–∞–∫—É–∞—Ü–∏–∏');
console.log('   ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–æ TTL –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
console.log('   ‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π');
console.log('   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∫—ç—à –¥–ª—è health checks');
console.log('   ‚Ä¢ –£–ª—É—á—à–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞');
console.log('   ‚Ä¢ –í–°–ï —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
console.log('   ‚Ä¢ –î–û–ë–ê–í–õ–ï–ù–´ –ù–û–í–´–ï –§–ò–ß–ò –î–õ–Ø RENDER.COM');
}