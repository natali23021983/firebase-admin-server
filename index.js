require('dotenv').config();
const express = require('express');
const cors = require("cors");
const admin = require('firebase-admin');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const { S3Client, PutObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } = require("@aws-sdk/client-s3");
const bodyParser = require("body-parser");
const path = require('path');
const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

const app = express();
app.use(cors());
app.use(express.json());

// Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å
const upload = multer({ storage: multer.memoryStorage() });

// === MIME types mapping ===
const mimeTypeMapping = {
  'image/jpeg': '.jpg',
  'image/png': '.png',
  'image/gif': '.gif',
  'image/webp': '.webp',
  'application/pdf': '.pdf',
  'video/mp4': '.mp4',
  'video/quicktime': '.mov',
  'video/x-msvideo': '.avi',
  'video/x-matroska': '.mkv',
  'application/msword': '.doc',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
  'application/vnd.ms-excel': '.xls',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
  'application/vnd.ms-powerpoint': '.ppt',
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
  'application/zip': '.zip',
  'application/x-rar-compressed': '.rar',
  'text/plain': '.txt',
  'audio/mpeg': '.mp3',
  'audio/wav': '.wav'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ MIME type
const getFileExtension = (mimeType) => {
  return mimeTypeMapping[mimeType] || '.bin';
};

// === Firebase Admin SDK ===
try{
    const base64 = process.env.FIREBASE_CONFIG;
    if (!base64) throw new Error("FIREBASE_CONFIG –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env");
    const serviceAccount = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));

    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      databaseURL: process.env.FIREBASE_DB_URL
    });
    console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

} catch (err) {
  console.error("üî• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", err);
}


const db = admin.database();
const auth = admin.auth();

// === –Ø–Ω–¥–µ–∫—Å S3 ===
const s3 = new S3Client({
  region: process.env.YC_S3_REGION || "ru-central1",
  endpoint: process.env.YC_S3_ENDPOINT || "https://storage.yandexcloud.net",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY,
    secretAccessKey: process.env.YC_SECRET_KEY,
  },
});
const BUCKET_NAME = process.env.YC_S3_BUCKET;
console.log("BUCKET_NAME:", process.env.YC_S3_BUCKET);



// === Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase-—Ç–æ–∫–µ–Ω–∞ ===
async function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization || "";
  const token = authHeader.startsWith("Bearer ") ? authHeader.split("Bearer ")[1] : null;

  if (!token) {
    console.warn("üö´ verifyToken: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
    return res.status(401).send("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞");
  }

  try {
    const decoded = await admin.auth().verifyIdToken(token);
    req.user = decoded;
    console.log("‚úÖ verifyToken: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, uid:", decoded.uid);
    next();
  } catch (err) {
    console.error("‚ùå verifyToken: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫", err);
    res.status(403).send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
  }
}


// === –£—Ç–∏–ª–∏—Ç—ã S3-–∑–∞–≥—Ä—É–∑–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è ===
async function uploadToS3(buffer, fileName, contentType) {
  await s3.send(new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: fileName,
    Body: buffer,
    ContentType: contentType,
    ACL: 'public-read'
  }));
  return `https://${BUCKET_NAME}.storage.yandexcloud.net/${fileName}`;
}

async function deleteFromS3(urls) {
  const keys = urls.map(url => {
    const parts = url.split(`${BUCKET_NAME}/`);
    return parts[1] ? { Key: parts[1] } : null;
  }).filter(Boolean);

  if (keys.length === 0) return;
  await s3.send(new DeleteObjectsCommand({
    Bucket: BUCKET_NAME,
    Delete: { Objects: keys }
  }));
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ä–µ–±—ë–Ω–∫–∞ ===
app.post('/deleteUserByName', async (req, res) => {
  const fullName = req.body.fullName?.trim().toLowerCase();
  if (!fullName) return res.status(400).send("fullName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  try {
    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};
    let found = false;

    for (const [userId, user] of Object.entries(users)) {
      const name = user.name?.trim().toLowerCase();
      const role = user.role?.trim().toLowerCase();

      // –†–æ–¥–∏—Ç–µ–ª—å
      if (name === fullName && role === '—Ä–æ–¥–∏—Ç–µ–ª—å') {
        found = true;

        // 1. –£–¥–∞–ª—è–µ–º –¥–µ—Ç–µ–π –∏–∑ –≥—Ä—É–ø–ø –∏ S3
        if (user.children) {
          const filesToDelete = [];

          for (const [childId, child] of Object.entries(user.children)) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ childId (–∞ –Ω–µ –ø–æ –∏–º–µ–Ω–∏!)
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
            // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã —Ä–µ–±–µ–Ω–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
          }

          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ S3
          if (filesToDelete.length > 0) {
            await deleteFromS3(filesToDelete);
          }
        }

        // 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        await db.ref(`users/${userId}`).remove();

        // 3. –£–¥–∞–ª—è–µ–º –∏–∑ Firebase Auth (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
        } catch (authError) {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:", authError.message);
        }

        return res.send("–†–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –¥–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã.");
      }

      // –ü–µ–¥–∞–≥–æ–≥
      if (name === fullName && role === '–ø–µ–¥–∞–≥–æ–≥') {
        found = true;

        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        const groupsSnap = await db.ref('groups').once('value');
        const groups = groupsSnap.val() || {};

        for (const [groupId, group] of Object.entries(groups)) {
          if (group.teachers?.[userId]) {
            await db.ref(`groups/${groupId}/teachers/${userId}`).remove();
          }
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.ref(`users/${userId}`).remove();

        try {
          await auth.getUser(userId);
          await auth.deleteUser(userId);
        } catch (authError) {
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Auth:", authError.message);
        }

        return res.send("–ü–µ–¥–∞–≥–æ–≥ —É–¥–∞–ª—ë–Ω.");
      }

      // –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫ (–ø–æ–∏—Å–∫ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏)
      if (user.children) {
        for (const [childId, child] of Object.entries(user.children)) {
          if (child.fullName?.trim().toLowerCase() === fullName) {
            found = true;

            // –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã
            if (child.group) {
              await db.ref(`groups/${child.group}/children/${childId}`).remove();
            }

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ S3
            const filesToDelete = [];
            if (child.avatarUrl) filesToDelete.push(child.avatarUrl);
            if (filesToDelete.length > 0) {
              await deleteFromS3(filesToDelete);
            }

            // –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.ref(`users/${userId}/children/${childId}`).remove();

            return res.send("–†–µ–±—ë–Ω–æ–∫ —É–¥–∞–ª—ë–Ω.");
          }
        }
      }
    }

    if (!found) {
      res.status(404).send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ deleteUserByName:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + err.message);
  }
});

// === –ù–æ–≤—ã–π endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–±–µ–Ω–∫–∞ ===
app.post('/deleteChild', async (req, res) => {
  const { userId, childId } = req.body;

  if (!userId || !childId) {
    return res.status(400).json({ error: "userId –∏ childId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    console.log('=== DELETE CHILD DEBUG START ===');

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞
    const childRef = db.ref(`users/${userId}/children/${childId}`);
    const childSnap = await childRef.once('value');

    if (!childSnap.exists()) {
      return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const child = childSnap.val();
    const groupName = child.group; // –≠—Ç–æ –ù–ê–ó–í–ê–ù–ò–ï –≥—Ä—É–ø–ø—ã!
    const childName = child.fullName.trim();

    console.log('üë∂ –ò–º—è —Ä–µ–±–µ–Ω–∫–∞:', `"${childName}"`);
    console.log('üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', groupName);

    // 2. –ù–∞—Ö–æ–¥–∏–º ID –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    let groupId = null;
    if (groupName) {
      console.log('üîç –ò—â–µ–º ID –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', groupName);

      const groupsRef = db.ref('groups');
      const groupsSnap = await groupsRef.once('value');
      const groups = groupsSnap.val() || {};

      console.log('–í—Å–µ –≥—Ä—É–ø–ø—ã:', JSON.stringify(groups, null, 2));

      for (const [id, groupData] of Object.entries(groups)) {
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É: ${id} -> ${groupData.name}`);
        if (groupData.name === groupName) {
          groupId = id;
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞! ID:', groupId);
          break;
        }
      }

      if (!groupId) {
        console.log('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', groupName);
        return res.status(404).json({ error: "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
    }

    // 3. –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
    console.log('üîç –ò—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ –≤ –≥—Ä—É–ø–ø–µ ID:', groupId);

    const groupChildrenRef = db.ref(`groups/${groupId}/children`);
    const groupChildrenSnap = await groupChildrenRef.once('value');
    const groupChildren = groupChildrenSnap.val() || {};

    console.log('üë• –î–µ—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ:', JSON.stringify(groupChildren, null, 2));

    // –ò—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –≥—Ä—É–ø–ø–µ
    let foundGroupChildId = null;
    for (const [groupChildId, groupChildName] of Object.entries(groupChildren)) {
      const trimmedGroupName = groupChildName.trim();
      console.log(`üîé –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: "${trimmedGroupName}" vs "${childName}"`);

      if (trimmedGroupName === childName) {
        foundGroupChildId = groupChildId;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! Key:', foundGroupChildId);
        break;
      }
    }

    if (foundGroupChildId) {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã');
      await groupChildrenRef.child(foundGroupChildId).remove();
      console.log('‚úÖ –†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã');
    } else {
      console.log('‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ');
      return res.status(404).json({ error: "–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ" });
    }

    // 4. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ S3
    const filesToDelete = [];
    if (child.avatarUrl) {
      filesToDelete.push(child.avatarUrl);
    }

    if (filesToDelete.length > 0) {
      await deleteFromS3(filesToDelete);
    }

    // 5. –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –±–∞–∑—ã —Ä–æ–¥–∏—Ç–µ–ª—è
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    await childRef.remove();

    console.log('=== DELETE CHILD DEBUG END ===');

    res.json({
      success: true,
      message: `–†–µ–±–µ–Ω–æ–∫ ${childName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ deleteChild:', err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞" });
  }
});

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email ===
app.post("/update-user", async (req, res) => {
  try {
    const { fullName, newEmail } = req.body;
    if (!fullName || !newEmail) return res.status(400).json({ error: "fullName –∏ newEmail –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

    const snap = await db.ref("users").orderByChild("name").equalTo(fullName).once("value");
    if (!snap.exists()) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const users = snap.val();
    const keys = Object.keys(users);
    if (keys.length > 1) return res.status(400).json({ error: "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º" });

    const userKey = keys[0];
    const user = users[userKey];
    const userId = user.userId;
    if (!userId) return res.status(400).json({ error: "userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ" });

    await auth.updateUser(userId, { email: newEmail });
    await db.ref(`users/${userKey}`).update({ email: newEmail });

    res.json({ message: "Email –æ–±–Ω–æ–≤–ª–µ–Ω", userId, updatedUser: { name: fullName, email: newEmail } });
  } catch (err) {
    if (err.code === 'auth/email-already-exists') {
      return res.status(400).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
    }
    console.error("–û—à–∏–±–∫–∞ update-user:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message });
  }
});

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏) ===

app.post("/news", verifyToken, async (req, res) => {
  try {
    const { newsId, groupId, title, description, mediaUrls = [] } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !title || !description) {
      return res.status(400).json({ error: "groupId, title –∏ description –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    if (newsId) {
      // === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
      const ref = db.ref(`news/${groupId}/${newsId}`);
      const snap = await ref.once("value");
      const oldNews = snap.val();
      if (!oldNews) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      if (oldNews.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

      // –£–¥–∞–ª—è–µ–º –∏–∑ S3 —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
      const oldUrls = oldNews.mediaUrls || [];
      const keepSet = new Set(mediaUrls);
      const toDelete = oldUrls.filter(url => !keepSet.has(url));
      await deleteFromS3(toDelete);

      const newData = {
        title,
        description,
        mediaUrls,
        authorId,
        timestamp: Date.now(),
      };

      await ref.update(newData);
      return res.json({ success: true, updated: true });
    }

    // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
    const id = uuidv4();
    const ref = db.ref(`news/${groupId}/${id}`);

    const data = {
      title,
      description,
      mediaUrls,
      timestamp: Date.now(),
      authorId
    };

    await ref.set(data);
    return res.json({ success: true, id });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ POST /news:", err);
    res.status(500).json({ error: err.message });
  }
});


// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ groupId ===
app.get("/news", verifyToken, async (req, res) => {
  try {
    const groupId = req.query.groupId;
    if (!groupId) {
      return res.status(400).json({ error: "groupId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    const snap = await db.ref(`news/${groupId}`).once("value");
    const newsData = snap.val() || {};

    const newsList = Object.entries(newsData).map(([id, news]) => ({
      id,
      title: news.title,
      description: news.description,
      groupId: groupId,
      authorId: news.authorId,
      mediaUrls: news.mediaUrls || [],   // üî• —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ
      timestamp: news.timestamp || 0
    }));

    newsList.sort((a, b) => b.timestamp - a.timestamp);

    res.json(newsList);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ GET /news:", err);
    res.status(500).json({ error: err.message });
  }
});


// === –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
app.post("/deleteNews", verifyToken, async (req, res) => {
  try {
    const { groupId, newsId } = req.body;
    const authorId = req.user.uid;

    if (!groupId || !newsId) {
      return res.status(400).json({ error: "groupId –∏ newsId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const snap = await db.ref(`news/${groupId}/${newsId}`).once('value');
    const data = snap.val();
    if (!data) return res.status(404).json({ error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

    if (data.authorId !== authorId) return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤" });

    const urls = data.mediaUrls || [];
    await deleteFromS3(urls);
    await db.ref(`news/${groupId}/${newsId}`).remove();

    res.json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ deleteNews:", err);
    res.status(500).json({ error: err.message });
  }
});



// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3 ===
app.post('/generate-upload-url', verifyToken, async (req, res) => {
  console.log('=== /generate-upload-url: –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));

  try {
    const { fileName, fileType, groupId, isPrivateChat, context } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!fileName || !fileType) {
      console.log('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è fileName –∏–ª–∏ fileType');
      return res.status(400).json({ error: "fileName –∏ fileType –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileExtension = getFileExtension(fileType);
    let finalFileName = fileName;

    // –ï—Å–ª–∏ —É —Ñ–∞–π–ª–∞ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –æ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    if (!finalFileName.includes('.') || !finalFileName.toLowerCase().endsWith(fileExtension.toLowerCase())) {
      // –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      const baseName = finalFileName.includes('.')
        ? finalFileName.substring(0, finalFileName.lastIndexOf('.'))
        : finalFileName;

      finalFileName = baseName + fileExtension;
      console.log('–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', finalFileName);
    }


    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let folder;
    let finalGroupId = groupId;

    if (context === 'news') {
      // –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
      folder = 'news/';
      console.log('–¢–∏–ø: –Ω–æ–≤–æ—Å—Ç—å');
    } else if (isPrivateChat === true) {
      folder = 'private-chats/';
      console.log('–¢–∏–ø: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (–ø–æ —Ñ–ª–∞–≥—É isPrivateChat)');
    } else if (groupId && groupId.startsWith('private_')) {
      folder = 'private-chats/';
      finalGroupId = groupId.replace('private_', '');
      console.log('–¢–∏–ø: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (legacy format)');
    } else if (groupId) {
      folder = 'group-chats/';
      console.log('–¢–∏–ø: –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç');
    } else {
      folder = 'misc/';
      console.log('–¢–∏–ø: –ø—Ä–æ—á–µ–µ (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)');
    }


    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π/–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)
    if (finalGroupId && folder !== 'news/') {
      const hasAccess = await checkChatAccess(req.user.uid, finalGroupId, folder === 'private-chats/');
      if (!hasAccess) {
        console.log('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', req.user.uid, '–Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É', finalGroupId);
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É" });
      }
      console.log('–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.uid);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const uniqueId = uuidv4().substring(0, 8);
    const safeFileName = finalFileName.replace(/[^a-zA-Z0-9.-]/g, '_');
    const key = `${folder}${finalGroupId ? finalGroupId + '/' : ''}${timestamp}_${uniqueId}_${safeFileName}`;

    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞:', key);
    console.log('ContentType:', fileType);

    const signedUrlParams = {
      Bucket: BUCKET_NAME,
      Key: key,
      ContentType: String(fileType),
      ACL: "public-read"
    };

    const command = new PutObjectCommand(signedUrlParams);
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è signed URL...');

    const uploadUrl = await getSignedUrl(s3, command, { expiresIn: 300 });
    const fileUrl = `https://${BUCKET_NAME}.storage.yandexcloud.net/${key}`;

    console.log('‚úÖ Signed URL —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    console.log('üìÅ File URL:', fileUrl);

    res.json({
      success: true,
      uploadUrl,
      fileUrl,
      fileName: finalFileName,
      key,
      expiresIn: 300,
      expiresAt: Date.now() + 300000 // timestamp –∏—Å—Ç–µ—á–µ–Ω–∏—è
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ upload URL:", err);

    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    if (err.name === 'CredentialsProviderError') {
      return res.status(500).json({
        success: false,
        error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ credentials"
      });
    }
    if (err.name === 'NoSuchBucket') {
      return res.status(500).json({
        success: false,
        error: `S3 bucket –Ω–µ –Ω–∞–π–¥–µ–Ω: ${BUCKET_NAME}`
      });
    }
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: " + err.message
      });
    }

    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
 async function checkChatAccess(userId, chatId, isPrivate) {
   try {
     console.log(
       '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
       userId,
       '–∫ —á–∞—Ç—É:',
       chatId,
       '—Ç–∏–ø:',
       isPrivate ? 'private' : 'group'
     );

     if (isPrivate) {
       // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤: –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ chatId
       const parts = chatId.split('_');
       const hasAccess = parts.includes(userId);
       console.log('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –¥–æ—Å—Ç—É–ø:', hasAccess, '—É—á–∞—Å—Ç–Ω–∏–∫–∏:', parts);
       return hasAccess;
     } else {
       // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
       const groupRef = db.ref(`groups/${chatId}`);
       const groupSnap = await groupRef.once('value');

       if (!groupSnap.exists()) {
         console.log('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', chatId);
         return false;
       }

       const group = groupSnap.val();

       // 1. –ï—Å–ª–∏ –ø–µ–¥–∞–≥–æ–≥
       if (group.teachers && group.teachers[userId]) {
         console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–µ–¥–∞–≥–æ–≥–æ–º –≥—Ä—É–ø–ø—ã');
         return true;
       }

       // 2. –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å
       if (group.parents && group.parents[userId]) {
         console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã');
         return true;
       }

       // 3. –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å –≥—Ä—É–ø–ø–æ–π —á–µ—Ä–µ–∑ —Ä–µ–±—ë–Ω–∫–∞
       const userRef = db.ref(`users/${userId}`);
       const userSnap = await userRef.once('value');

       if (userSnap.exists()) {
         const user = userSnap.val();

         if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children) {
           for (const childId of Object.keys(user.children)) {
             if (
               (group.children && group.children[childId]) || // —Ä–µ–±—ë–Ω–æ–∫ –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ
               (user.children[childId].groupId === chatId) || // –∏–ª–∏ –ø–æ –ø–æ–ª—é groupId
               (user.children[childId].group === chatId)      // legacy
             ) {
               console.log('‚úÖ –†–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å –≥—Ä—É–ø–ø–æ–π —á–µ—Ä–µ–∑ —Ä–µ–±—ë–Ω–∫–∞:', childId);
               return true;
             }
           }
         }
       }

       console.log('‚õî –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
       return false;
     }
   } catch (error) {
     console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É:', error);
     return false;
   }
 }

 // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞ –ø–æ chatId
 async function isPrivateChatId(chatId) {
   try {
     // 1. –ï—Å–ª–∏ chatId —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
     if (chatId.includes('_')) {
       console.log("üîç ChatId —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç");

       // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
       const privateChatRef = db.ref(`chats/private/${chatId}`);
       const privateSnap = await privateChatRef.once('value');

       if (privateSnap.exists()) {
         console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å ID:", chatId);
         return true;
       }

       // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —Å '_' –≤ ID
       const groupChatRef = db.ref(`chats/groups/${chatId}`);
       const groupSnap = await groupChatRef.once('value');

       if (groupSnap.exists()) {
         console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å ID (—Å–æ–¥–µ—Ä–∂–∏—Ç '_'):", chatId);
         return false;
       }

       // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ —Ç–∞–º –Ω–∏ —Ç–∞–º - —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
       console.log("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ ID —Å–æ–¥–µ—Ä–∂–∏—Ç '_' - —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º");
       return true;
     }

     // 2. –ï—Å–ª–∏ –Ω–µ—Ç '_' - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
     const groupChatRef = db.ref(`chats/groups/${chatId}`);
     const groupSnap = await groupChatRef.once('value');

     if (groupSnap.exists()) {
       console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å ID:", chatId);
       return false;
     }

     // 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ - –æ—à–∏–±–∫–∞
     console.log("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö, –Ω–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö:", chatId);
     return false;

   } catch (error) {
     console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞:", error);
     // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É: –µ—Å–ª–∏ –µ—Å—Ç—å '_' - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
     return chatId.includes('_');
   }
 }


// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.post("/save-fcm-token", verifyToken, async (req, res) => {
  try {
    const { fcmToken } = req.body;
    const userId = req.user.uid;

    if (!fcmToken) {
      return res.status(400).json({ error: "fcmToken –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

    await db.ref(`users/${userId}`).update({
      fcmToken,
      fcmTokenUpdated: Date.now()
    });

    console.log("‚úÖ FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
    res.json({ success: true });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:", err);
    res.status(500).json({ error: err.message });
  }
});


// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º ===
app.post("/send-message", verifyToken, async (req, res) => {
  try {
    const { chatId, message, messageType = "text", fileUrl, fileName } = req.body;
    const senderId = req.user.uid;

    if (!chatId || !message) {
      return res.status(400).json({ error: "chatId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    console.log("üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:", senderId, "–≤ —á–∞—Ç:", chatId);

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const senderSnap = await db.ref(`users/${senderId}`).once('value');
    const sender = senderSnap.val();
    const senderName = sender?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
    const messageId = uuidv4();
    const messageData = {
      id: messageId,
      senderId,
      senderName,
      text: message,
      timestamp: Date.now(),
      fileUrl: fileUrl || null,
      fileType: messageType,
      fileName: fileName || null
    };

    // 3. ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –ß–ê–¢–ê –ò –°–û–•–†–ê–ù–Ø–ï–ú –í –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨
    let chatRef;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –ø–æ chatId
    const isPrivateChat = await isPrivateChatId(chatId);

    if (isPrivateChat) {
      // ‚úÖ –ü–†–ò–í–ê–¢–ù–´–ô –ß–ê–¢: chats/private/chatId/messages
      chatRef = db.ref(`chats/private/${chatId}/messages/${messageId}`);
      console.log("üîí –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ü–†–ò–í–ê–¢–ù–´–ô —á–∞—Ç:", chatId);
    } else {
      // ‚úÖ –ì–†–£–ü–ü–û–í–û–ô –ß–ê–¢: chats/groups/chatId/messages
      chatRef = db.ref(`chats/groups/${chatId}/messages/${messageId}`);
      console.log("üë• –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ì–†–£–ü–ü–û–í–û–ô —á–∞—Ç:", chatId);
    }

    await chatRef.set(messageData);
    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –ø–æ –ø—É—Ç–∏:", chatRef.toString());

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await sendChatNotification({
      chatId,
      senderId,
      senderName,
      message,
      messageType,
      fileUrl,
      fileName,
      isPrivate: isPrivateChat // –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —á–∞—Ç–∞
    });

    res.json({
      success: true,
      messageId,
      timestamp: messageData.timestamp
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    res.status(500).json({ error: err.message });
  }
});

// === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ===
async function sendChatNotification({ chatId, senderId, senderName, message, messageType, fileUrl, fileName, isPrivate }) {
  try {
    console.log("üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏...");
    console.log("chatId:", chatId);
    console.log("senderId:", senderId);
    console.log("senderName:", senderName);
    console.log("message:", message);
    console.log("messageType:", messageType);
    console.log("isPrivate:", isPrivate);

    // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    let recipientIds = [];

    if (isPrivate) {
      const parts = chatId.split('_');
      recipientIds = parts.filter(id => id !== senderId);
      console.log('üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –ø–æ–ª—É—á–∞—Ç–µ–ª–∏:', recipientIds);
    } else {
      const groupSnap = await db.ref(`groups/${chatId}`).once('value');
      const group = groupSnap.val();

      if (group) {
        if (group.teachers) recipientIds.push(...Object.keys(group.teachers));
        if (group.parents) recipientIds.push(...Object.keys(group.parents));
        recipientIds = recipientIds.filter(id => id !== senderId);
        console.log('üë• –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –ø–æ–ª—É—á–∞—Ç–µ–ª–∏:', recipientIds);
      }
    }

    if (recipientIds.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
      return;
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const tokens = [];
    for (const recipientId of recipientIds) {
      const userSnap = await db.ref(`users/${recipientId}`).once('value');
      const user = userSnap.val();

      if (user && user.fcmToken) {
        tokens.push(user.fcmToken);
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è:", recipientId);
      } else {
        console.log("‚ö†Ô∏è –ù–µ—Ç FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è:", recipientId);
      }
    }

    if (tokens.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö FCM —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏");
      return;
    }

    // üü¢ –í–û–¢ –°–Æ–î–ê –≤—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º
    console.log("üì± –ö–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:", tokens.length);
    console.log("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤:", tokens);

    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    let notificationBody = message;
    if (messageType === "image") notificationBody = "üì∑ –§–æ—Ç–æ";
    else if (messageType === "video") notificationBody = "üé• –í–∏–¥–µ–æ";
    else if (messageType === "file") notificationBody = `üìé –§–∞–π–ª: ${fileName || "—Ñ–∞–π–ª"}`;
    else if (messageType === "audio") notificationBody = "üéµ –ê—É–¥–∏–æ";

// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
for (const token of tokens) {
  try {
    console.log("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ push –¥–ª—è —Ç–æ–∫–µ–Ω–∞:", token.substring(0, 10) + "...");

    const messagePayload = {
      token,
      data: {
        type: "chat",
        senderName: String(senderName || ""),
        message: String(notificationBody || ""),
        chatId: String(chatId || ""),
        senderId: String(senderId || ""),
        timestamp: String(Date.now()),
        displayName: String(senderName || ""),
        isGroup: isPrivate ? "false" : "true" // ‚úÖ –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
      },
      android: {
        priority: "high"
      },
      apns: {
        payload: {
          aps: { contentAvailable: true }
        }
      }
    };

    console.log("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é FCM payload:", JSON.stringify(messagePayload.data, null, 2));
    const response = await admin.messaging().send(messagePayload);

    console.log("‚úÖ –ü—É—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞:", token.substring(0, 10) + "...", "| response:", response);

  } catch (tokenError) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:", token.substring(0, 10) + "...", tokenError.message);

    if (tokenError.code === "messaging/registration-token-not-registered") {
      await removeInvalidToken(token);
    }
  }
}


    console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ${tokens.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendChatNotification:", err.message, err.stack);
  }
}


// === –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞ ===
async function removeInvalidToken(invalidToken) {
  try {
    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞:", invalidToken.substring(0, 10) + "...");

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º
    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};

    for (const [userId, user] of Object.entries(users)) {
      if (user.fcmToken === invalidToken) {
        await db.ref(`users/${userId}`).update({ fcmToken: null });
        console.log("‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
        break;
      }
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", err);
  }
}


// === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ ===
app.post("/send-event-notification", verifyToken, async (req, res) => {
  try {
    const {
      groupId,
      groupName,
      childId,
      childName,
      eventId,
      title,
      time,
      place,
      comments,
      date
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!groupId || !eventId || !title || !childId) {
      return res.status(400).json({
        error: "groupId, eventId, title, childId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
      });
    }

    console.log("üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏:");
    console.log("   - –ì—Ä—É–ø–ø–∞:", groupId, groupName);
    console.log("   - –†–µ–±–µ–Ω–æ–∫:", childId, childName);
    console.log("   - –°–æ–±—ã—Ç–∏–µ:", title, time);

    // 1. –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Ä–µ–±–µ–Ω–∫–∞
    const parents = await findParentsByChildId(childId);

    if (parents.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞:", childId);
      return res.json({
        success: true,
        message: "–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
      });
    }

    console.log("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–∏:", parents.length);

    // 2. –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    const tokens = [];
    for (const parent of parents) {
      if (parent.fcmToken) {
        tokens.push(parent.fcmToken);
        console.log("‚úÖ –¢–æ–∫–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è:", parent.userId, parent.name);
      }
    }

    if (tokens.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö FCM —Ç–æ–∫–µ–Ω–æ–≤ —É —Ä–æ–¥–∏—Ç–µ–ª–µ–π");
      return res.json({
        success: true,
        message: "–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"
      });
    }

    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notificationBody = formatEventNotification(title, time, place, childName);

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await sendEventNotifications({
      tokens,
      groupId,
      groupName,
      childId,
      childName,
      eventId,
      title,
      time,
      place,
      comments,
      date,
      notificationBody
    });

    console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ${tokens.length} —Ä–æ–¥–∏—Ç–µ–ª–µ–π`);

    res.json({
      success: true,
      message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${tokens.length} —Ä–æ–¥–∏—Ç–µ–ª—è–º`,
      recipients: tokens.length
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏:", err);
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.message
    });
  }
});

// === –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ ID —Ä–µ–±–µ–Ω–∫–∞ ===
async function findParentsByChildId(childId) {
  try {
    console.log("üîç –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞:", childId);

    const usersSnap = await db.ref('users').once('value');
    const users = usersSnap.val() || {};
    const parents = [];

    for (const [userId, user] of Object.entries(users)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é "–†–æ–¥–∏—Ç–µ–ª—å"
      if (user.role === "–†–æ–¥–∏—Ç–µ–ª—å" && user.children) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω—É–∂–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫
        if (user.children[childId]) {
          parents.push({
            userId,
            name: user.name || "–†–æ–¥–∏—Ç–µ–ª—å",
            fcmToken: user.fcmToken || null
          });
          console.log("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å:", user.name, "–¥–ª—è —Ä–µ–±–µ–Ω–∫–∞:", childId);
        }
      }
    }

    return parents;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:", error);
    return [];
  }
}

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
function formatEventNotification(title, time, place, childName) {
  let notification = `üìÖ ${title}`;

  if (time) {
    notification += ` –≤ ${time}`;
  }

  if (place) {
    notification += ` (${place})`;
  }

  if (childName) {
    notification += ` –¥–ª—è ${childName}`;
  }

  return notification;
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏–∏ ===
async function sendEventNotifications({
  tokens,
  groupId,
  groupName,
  childId,
  childName,
  eventId,
  title,
  time,
  place,
  comments,
  date,
  notificationBody
}) {
  try {
    console.log("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤:", tokens.length);

    for (const token of tokens) {
      try {
        console.log("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞:", token.substring(0, 10) + "...");

        const messagePayload = {
          token,
          data: {
            type: "new_event",
            groupId: String(groupId || ""),
            groupName: String(groupName || ""),
            childId: String(childId || ""),
            childName: String(childName || ""),
            eventId: String(eventId || ""),
            title: String(title || ""),
            time: String(time || ""),
            place: String(place || ""),
            comments: String(comments || ""),
            date: String(date || ""),
            timestamp: String(Date.now())
          },
          notification: {
            title: "üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
            body: notificationBody,
            // –î–ª—è Android - –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            android: {
              priority: "high",
              notification: {
                sound: "default",
                channel_id: "events_channel"
              }
            },
            // –î–ª—è iOS
            apns: {
              payload: {
                aps: {
                  sound: "default",
                  badge: 1,
                  'content-available': 1
                }
              }
            }
          }
        };

        console.log("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é FCM payload:", JSON.stringify(messagePayload.data, null, 2));
        const response = await admin.messaging().send(messagePayload);

        console.log("‚úÖ –ü—É—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞:", token.substring(0, 10) + "...", "| response:", response);

      } catch (tokenError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:", token.substring(0, 10) + "...", tokenError.message);

        // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        if (tokenError.code === "messaging/registration-token-not-registered") {
          await removeInvalidToken(token);
        }
      }
    }

    console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ${tokens.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ sendEventNotifications:", err.message, err.stack);
  }
}


// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.get("/", (req, res) => res.send("Server is running"));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
